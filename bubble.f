       PROGRAM BUBBLE
C
C     BUBBLE IS A PROGRAM FOR FINDING THE CRITICAL POINTS IN DEL-SQUARED
C     RHO FOR A MOLECULE. THIS IS DONE BY SEARCHING THE VOLUME
C     AROUND A NUCLEI FOR REGIONS IN WHICH THE CURVATURE CORRESPONDS
C     TO THE SIGNATURE OF THE DESIRED CRITICAL POINT. WHEN A POINT
C     IS FOUND WITHIN THE DESIRED CURVATURE, BUBBLE FINDS THE CRITICAL
C     POINT WITHIN THAT CURVATURE.
C
C     VERSION 2.0
C
C     PROGRAM WRITTEN BY PAUL KRUG   MCMASTER UNIVERSITY 1990
C
C
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      CHARACTER*7 LABEL
      CHARACTER*8  ATNAM
      CHARACTER*80 JOBTTL,WFNTTL,LINE
      CHARACTER*4 FWN, FOUT, FINP
      PARAMETER(FWN='.wfn', FOUT='.bub', FINP='.dbt')
      CHARACTER*40 WFN,WOUT,WINP
C
      DIMENSION PN(4),WORK(9),EV(3),EU(3),DH(3,3),ISIG(30),VM(2)
C
      DIMENSION X(30),Y(30),Z(30),XYZ(3),W(3),SV(3),H(3,3),RM(2)
C
      DIMENSION  SXYZ(3),FXYZ(3),AXYZ(3),DIFF(3),BXYZ(3),CXYZ(3)
C
      DIMENSION XSAVE(30), YSAVE(30), ZSAVE(30),GRAD2(3)
C
      COMMON CO(400000),IC(400000),MODE,NCENT,NMO,NPRIMS
C
      COMMON /ANG/ ANGLE(3,30,30)
C
      COMMON /C2/ EPSD
C
      COMMON /DATA/ MODES,MODEG
C
      COMMON /DIST/ RMIN,RMAX,MINR
C
C
      COMMON /OFFSET/ ITYPE,ICENT,KATOM,IEORB,IE,IMO,ICHARG,IXC,IYC,IZC,
     1  IXX, IYY, IZZ,IXS,IYS,IZS,IRR,IR2,IP,IPSI,IGX,IGY,IGZ,ID2,
     +IGXX,IGXY,IGXZ,IGYY,IGYZ,IGZZ,IGXXX,IGXXY,IGXXZ,IGYYY,IGYYX,
     +IGYYZ,IGZZZ,IGZZX,IGZZY,IGXYZ,IGXXXX,IGXXXY,IGXXXZ,IGXXYY,
     +IGXXZZ,IGXXYZ,IGYYYY,IGYYYX,IGYYYZ,IGYYXZ,IGZZZZ,IGZZZX,
     +IGZZZY,IGZZYY,IGZZXY
C
C
C
      COMMON /STRESS/ SG(3,3),GRADSG(3)
C
      COMMON /STRING/ WFNTTL,JOBTTL,ATNAM(60),NAT
C
      COMMON /STUFF/ PI,RADIAN,DEGREE
C
      COMMON /UNITS/  INPT,IOUT,IWFN
C
      DATA INP /0/, DXYZ /1.0D-10/, EPS /1.0D-10/
C
C
C*********   FOR UNIX IMPLEMENTATION **************
C
C     CALL THE SUBROUTINE MAKNAME TO CREAT NAMES FOR THE OPENING
C     UNITS.
C
      CALL MAKNAME (1,WINP,ILEN,FINP)
      IF (ILEN .EQ. 0) STOP 'USAGE: bubble dbtfile wfnfile'
C
      CALL MAKNAME (2,WFN,ILEN,FWFN)
      IF (ILEN .EQ. 0) STOP 'USAGE: bubble dbtfile wfnfile'
C
      CALL MAKNAME (1,WOUT,ILEN,FOUT)
C
C   OPEN UNITS
C
      OPEN (INPT,FILE = WINP)
      OPEN (IOUT,FILE = WOUT)
      OPEN (IWFN,FILE = WFN)
C
C***************************************************
C
      IPISS=0
      NCRIT=0
      ISTEP=0
      AEPS=0.01
      XCR=0.0D0
C
C     READ IN THE INFORMATION FROM THE WAVEFUNCTION FILE.
C
      CALL RDWFN
      write(iout,*) 'sali de rdwfn' 
C
C       READ IN TITLE CARD:
C
      READ(INPT,1010) JOBTTL
      WRITE(IOUT,1010) JOBTTL
      WRITE(IOUT,*) ('    ')
      WRITE (IOUT,*) (' BUBBLE: VERSION 2.0 ')
      WRITE (IOUT,*) (' WELCOME TO BUBBLE !! ')
      WRITE(IOUT,*) ('  ')
C     READ THE ATOMIC COORDINATES, THE SEARCH FOR CRITICAL POINTS WILL BE
C     CENTRED AROUND THIS POINT.
C
      DO 101 I=1,NCENT
        WRITE(IOUT,1030)ATNAM(I),CO(IXC+I),CO(IYC+I),CO(IZC+I)
 101  CONTINUE
C
C         READ ATOM# :
C
      READ (INPT,1001) LINE
      LPST = 8
        IF (NUMBER(LINE,LPST,J,DNUM) .GT. 0) GOTO 1002
      WRITE(IOUT,300)J
      CXYZ(1) = CO(IXC+J)
      CXYZ(2) = CO(IYC+J)
      CXYZ(3) = CO(IZC+J)
      WRITE(IOUT,*) ('   ')
      WRITE(IOUT,*)('THE COORDINATES OF THE SEARCHED ATOM ARE:')
C
      WRITE(IOUT,117)(CXYZ(I),I=1,3)
C
C        READ NUMBER OF CRITICAL POINTS TO BE FOUND
C
      READ (INPT,1001) LINE
      LPST = 8
        IF (NUMBER(LINE,LPST,INUM,DNUM) .GT. 0) GOTO 1004
        CONTINUE
C
C     ISTEP IS A PARAMETER WHICH GIVES THE NUMBER OF STEPS TO BE TAKEN
C     ALONG EACH COORDINATE AXIS.
C
      IF (INUM .LT. 20 .AND. INUM .GT. 0) THEN
        WRITE(IOUT,301)INUM
        IFLAG=15
        ISTEP=3
      ELSE IF (INUM .EQ. 0) THEN
        IFLAG = 0
        WRITE(IOUT,*)('     ')
        WRITE(IOUT,*)('STANDARD SEARCH')
        ISTEP = 14
      ELSE
        WRITE(IOUT,114)
        GOTO 9999
      ENDIF
C
C***********************************************************************
C***********************************************************************
C     READ IN THE DESIRED CURVATURE. IN FUTURE VERSIONS OF THIS
C     PROGRAM IT WILL BE POSSIBLE TO HAVE MORE THAN ONE DESIRED
C     CURVATURE SO DIFFERENT TYPES OF CRITICAL POINTS CAN BE
C     FOUND.
C
      READ (INPT,1001) LINE
      LPST = 8
        IF (NUMBER(LINE,LPST,ICURV,DNUM) .GT. 0) GOTO 1006
        CONTINUE
      IF (ICURV .EQ. 3 .OR. ICURV .EQ. 1 .OR. ICURV .EQ. -3
     + .OR. ICURV .EQ. -1) THEN
        GOTO 111
      ELSE
        WRITE(IOUT,115)
        GOTO 9999
      ENDIF
C
C
 111  IF (ICURV .LT. 0) THEN
        WRITE(IOUT,304) ICURV
      ELSE
        WRITE(IOUT,306) ICURV
      ENDIF
C
C       READ IN RANGE OF SEARCH:
C
      READ (INPT,1001) LINE
      LPST = 8
      DO 90 I = 1,2
        IF (NUMBER(LINE,LPST,NUM,VM(I)) .GT. 0) GOTO 1008
90    CONTINUE
C
      VMIN=VM(1)
      VMAX=VM(2)
C
      IF (VMAX .LT. 0 .OR. VMIN .LT. 0)THEN
        WRITE(IOUT,116)
        GOTO 9999
      ENDIF
      WRITE(IOUT,308) VMIN,VMAX,J
C
C     SET THE STARTING COORDINATES
C
      DO 400 I=1,3
        SXYZ(I)= CXYZ(I) - VMAX
 400  CONTINUE
C
C     SET UP THE FINAL COORDINATES
C
      DO 405 I=1,3
        FXYZ(I) = CXYZ(I) + VMAX
 405  CONTINUE
C
C     MOVE TO THE STARTING POSITION
C
 409  DO 410 I=1,3
        XYZ(I) = SXYZ(I)
 410  CONTINUE
C     GENERATE THE INCREMENT
C
      XCR =DABS(FXYZ(1) - XYZ(1))/ISTEP
C
      IF (IFLAG .EQ. 0 .OR. IFLAG .EQ. 15) THEN
C       START HITTING POINTS
C
        WRITE (IOUT,*) ('   ')
       WRITE (IOUT,*) ('********************************************************
     +********************************')
      ENDIF
      DO 415 J=1,ISTEP+1
        XYZ(2) = SXYZ(2)
        DO 420 K=1,ISTEP+1
          XYZ(3) = SXYZ(3)
          DO 425 L=1,ISTEP+1
C     DO WE WANT TO COMPUTE AT THIS POINT OR IS IT TOO CLOSE TO THE
C     NUCLEUS.
C
C     V IS THE VECTOR FROM THE NUCLEUS TO THE CURRENT POINT.
C
            DO 540 I=1,3
              BXYZ(I) = DABS(XYZ(I) - CXYZ(I))
 540        CONTINUE
            V = DSQRT(BXYZ(1)**2 + BXYZ(2)**2 + BXYZ(3)**2)
            IF (V .LT. VMIN ) THEN
              GOTO 424
            ELSE IF (V .GT. VMAX ) THEN
              GOTO 424
            ENDIF
C
C      CALCULATE THE HESSIAN MATRIX OF DEL-SQUARED RHO FOR THE
C      CURRENT POINT.
C
            CALL DGRD (XYZ,GRAD2,GRADD,DH)
C
C      DIAGONALIZE THE HESSIAN OF DEL-SQUARED RHO AND DETERMINE
C      ITS EIGENVALUES AND EIGENVECTORS.
C
            CALL TRACE (DH,EU,WORK,3,IFAIL)
C      WHAT KIND OF CURVATURE ARE WE ON ?
            ITEST=0
            DO 600 M=1,3
C
C      ITEST IS THE ALGEBRAIC SUM OF THE SIGNS OF THE EIGENVALUES
C      OF THE HESSIAN MATRIX OF DEL-SQUARED RHO.
C      THE CURRENT POINT IS ON THE DESIRED CURVATURE IF ITEST
C      EQUALS ICURV.
C
               IF (EU(M) .GT. DXYZ) THEN
                 ITEST = ITEST + 1
               ELSE IF (EU(M) .LT. DXYZ) THEN
                 ITEST = ITEST - 1
               ENDIF
 600         CONTINUE
             IF (ICURV .EQ. ITEST) THEN
               IF (IPISS .EQ. 1) THEN
                 GOTO 424
              ENDIF
               GOTO 610
             ELSE
C
C      FORGET ABOUT THIS POINT.
C
               IPISS=0
               GOTO 424
             ENDIF
CA
C      SAVE THE POSITION OF THE CURRENT POINT BECAUSE IT WILL
C      BE NEEDED TO CONTINUE THE SEARCH AFTER THE CRITICAL POINT
C      HAS BEEN FOUND.
C
 610          DO 611 I=1,3
                AXYZ(I) = XYZ(I)
 611          CONTINUE
C
C     BRING IN THE BIG-FIG-NEWTON TO FIND THE CRITICAL POINT.
C
         IFAIL=0
         CALL FIGNEWTON (AXYZ,EPS,IFAIL)
         IF (IFAIL .EQ. 1) THEN
           GOTO 424
         ENDIF
C
         DO 603 I =1,3
           BXYZ(I) = DABS(AXYZ(I)-CXYZ(I))
 603     CONTINUE
         V=DSQRT(BXYZ(1)**2 + BXYZ(2)**2 + BXYZ(3)**2)
         IF (V .LT. VMIN) THEN
           GOTO 424
         ELSE IF (V .GT. VMAX) THEN
           GOTO 424
         ENDIF
C
C     HAS THIS POINT BEEN FOUND BEFORE ?
C
      IF (NCRIT .EQ. 0) THEN
        CALL GRD(AXYZ,W,GRAD,H)
        CALL DGRD(AXYZ,GRAD2,GRADD,DH)
        CALL TRACE(DH,EU,WORK,3,IFAIL)
        DICK=DABS(GRAD)
        ITEST = 0
        DO 636 M=1,3
          IF (EU(M) .GT. DXYZ) THEN
            ITEST = ITEST + 1
          ELSE IF (EU(M) .LT. DXYZ) THEN
            ITEST = ITEST - 1
          ENDIF
 636    CONTINUE
        IF (ICURV .NE. ITEST) THEN
          GOTO 424
        ENDIF
        X(1) = AXYZ(1)
        Y(1) = AXYZ(2)
        Z(1) = AXYZ(3)
C
        NCRIT=1
      ELSE
        DO 700 M=1,NCRIT
          DIFF(1) = DABS(X(M)-AXYZ(1))
          DIFF(2) = DABS(Y(M)-AXYZ(2))
          DIFF(3) = DABS(Z(M)-AXYZ(3))
          IF (DIFF(1) .LT. AEPS .AND. DIFF(2) .LT. AEPS .AND.
     + DIFF(3) .LT. AEPS) THEN
            GOTO 424
          ENDIF
 700    CONTINUE
        CALL GRD(AXYZ,W,GRAD,H)
        CALL DGRD(AXYZ,GRAD2,GRADD,DH)
        CALL TRACE(DH,EU,WORK,3,IFAIL)
        DICK = DABS(GRAD)
        ITEST = 0
        DO 637 M=1,3
          IF (EU(M) .GT. DXYZ) THEN
            ITEST = ITEST + 1
          ELSE IF (EU(M) .LT. DXYZ) THEN
            ITEST = ITEST - 1
          ENDIF
 637    CONTINUE
        IF (ICURV .NE. ITEST) THEN
          GOTO 424
        ENDIF
        NCRIT = NCRIT + 1
        X(NCRIT)=AXYZ(1)
        Y(NCRIT)=AXYZ(2)
        Z(NCRIT)=AXYZ(3)
        IPISS = 1
      ENDIF
C
C      CALCULATE RHO AND DEL-SQUARED RHO.
C
      RHO = 0.D0
      GX = 0.D0
      DO 140 I = 1,NMO
        RHO = RHO+CO(IP+I)*CO(IPSI+I)**2
        GX = GX+CO(IP+I)*(CO(IGX+I)**2+CO(IGY+I)**2+CO(IGZ+I)**2)
 140  CONTINUE
      DELSQ = H(1,1) + H(2,2) + H(3,3)
      GX = GX*0.50D0
      XL = -0.250D0*DELSQ
      XK = XL + GX
C
C    STORE AWAY COORDINATES OF CRITICAL POINT
C    FOR END OF RUN
C
      INP = INP + 1
      XSAVE(INP) = AXYZ(1)
      YSAVE(INP) = AXYZ(2)
      ZSAVE(INP) = AXYZ(3)
C
C     RCP IS THE LENGTH OF THE VECTOR FROM THE NUCLEUS TO THE
C     CRITICAL POINT.
C
      R=DSQRT(AXYZ(1)**2 + AXYZ(2)**2 + AXYZ(3)**2)
C
      WRITE (IOUT,*) ('   ')
C
      WRITE(IOUT,1110)
      WRITE(IOUT,1120)AXYZ(1),AXYZ(2),AXYZ(3),R
      WRITE(IOUT,1160)
      WRITE(IOUT,1170)(EU(II),II=1,3)
      WRITE (IOUT,1190)
      DO 150 III = 1,3
        WRITE (IOUT,1170) (DH(III,JJJ),JJJ=1,3)
150   CONTINUE
      WRITE(IOUT,1230)RHO,GRAD,DELSQ,GX,XK,XL
C
      WRITE (IOUT,1130)
      WRITE (IOUT,1140)
C
      DO 130 I = 1,NCENT
        CALL GEOM (I,AXYZ(1),AXYZ(2),AXYZ(3),RN,AYZ,AXZ,AXY)
        WRITE(IOUT,1150) ATNAM(I),RN,AYZ,AXZ,AXY
 130  CONTINUE
      WRITE(IOUT,1155)V
       WRITE (IOUT,*) ('********************************************************
     +********************************')
      IF (INUM .LT. 20 .AND. INUM .GT. 0) THEN
        IF (INUM .EQ. NCRIT) THEN
          WRITE(IOUT,177)
C
        WRITE (IOUT,1330)
        DO 189 I = 1,INP
          WRITE (IOUT,1090) XSAVE(I),YSAVE(I),ZSAVE(I)
189     CONTINUE
C
          GOTO 9999
        ENDIF
      ENDIF
 424         XYZ(3) = XYZ(3) + XCR
 425       CONTINUE
           XYZ(2) = XYZ(2) + XCR
 420     CONTINUE
         XYZ(1) = XYZ(1) + XCR
 415   CONTINUE
       IF (INUM .GT. 0) THEN
         IFLAG = IFLAG - 1
         ISTEP = ISTEP + 1
         IF (IFLAG .EQ. 0) THEN
           IF (NCRIT .EQ. 0) THEN
             WRITE(IOUT,119)
             GOTO 9999
           ELSE IF (NCRIT .GT. 0) THEN
             WRITE(IOUT,118)
             WRITE(IOUT,120)NCRIT
             GOTO 9999
           ENDIF
         ENDIF
         GOTO 409
       ENDIF
       IF (NCRIT .EQ. 0) THEN
         WRITE(IOUT,*)('SORRY BUDDY, NO POINTS FOUND')
         GOTO 9999
       ELSE
         WRITE(IOUT,210) NCRIT
C
        WRITE (IOUT,1330)
        DO 190 I = 1,INP
          WRITE (IOUT,1090) XSAVE(I),YSAVE(I),ZSAVE(I)
190     CONTINUE
         GOTO 9999
       ENDIF
C
C
C    FORMATS
C
 300  FORMAT(/,'ATOM NUMBER OF SEARCHED ATOM:',2X,I2)
210   FORMAT(/,'NORMAL TERMINATION:',7X,I2,1X,'CRITICAL POINTS FOUND')
1001  FORMAT(A80)
1002  WRITE (IOUT,1003)
1003  FORMAT(' ERROR IN ATOM# CARD ')
      GOTO 9999
1004  WRITE (IOUT,1005)
1005  FORMAT(' ERROR IN POINTS CARD ')
      GOTO 9999
1006  WRITE (IOUT,1007)
1007  FORMAT(' ERROR IN SIGNATURE CARD ')
      GOTO 9999
1008  WRITE (IOUT,1009)
1009  FORMAT(' ERROR IN RANGE CARD ')
      GOTO 9999
117   FORMAT(10X,3F9.6)
114   FORMAT(/,'ERROR IN POINTS SPECIFICATION CARD')
115   FORMAT(/,'ERROR IN SIGNATURE SPECIFICATION')
116   FORMAT(/,'SEARCH BOUNDARY ERROR')
177   FORMAT(/,'ALL REQUESTED CRITICAL POINTS HAVE BEEN FOUND')
118   FORMAT(/,'NOT ALL REQUESTED CRITICAL POINTS COULD BE FOUND')
119   FORMAT(/,'NO CRITICAL POINTS COULD BE FOUND IN THIS RANGE')
120   FORMAT('ONLY',1X,I2,1X,'CRITICAL POINTS COULD BE FOUND')
301   FORMAT(/,'THE NUMBER OF CRITICAL POINTS TO BE FOUND:',2X,I2)
304   FORMAT(/,'THE SIGNATURE OF THE CRITICAL POINTS:',2X,I2)
306   FORMAT(/,'THE SIGNATURE OF THE CRITICAL POINTS:',2X,'+',I2)
308   FORMAT(/,'THE SEARCHING RANGE IS:',1X,1F9.6,1X,'TO',1F9.6,
     +1X,'a.u. FROM ATOM #',I2)
1010  FORMAT(A80)
1030  FORMAT(6X,A8,4X,3F15.8)
1110  FORMAT(' COORDINATES OF CRITICAL POINT ')
1120  FORMAT(10X,'X = ',1PE16.8,/,10X,'Y = ',1PE16.8,/,
     +       10X,'Z = ',1PE16.8,/,10X,'R = ',1PE16.8)
1130  FORMAT(/,' VECTORS FROM NUCLEI TO CRITICAL POINT',/,' LENGTHS ',
     + 'AND ANGLES MADE WITH PROJECTIONS ONTO YZ/XZ/XY PLANES OF MCS')
1140  FORMAT(/,' NUCLEUS',8X,'LENGTH',8X,'YZ ANGLE',8X,'XZ ANGLE',
     + 8X,'XY ANGLE')
1150  FORMAT(1X,A8,1X,1P4E16.8)
1155  FORMAT(/,1X,'DISTANCE FROM THE SEARCHED NUCLEUS: ',1PE16.8,/)
1160  FORMAT(/,' EIGENVALUES OF THE HESSIAN (-DEL-SQUARED RHO)')
1170  FORMAT(1X,1P3E18.8)
1190  FORMAT(/,' EIGENVECTORS OF THE HESSIAN (-DEL-SQUARED RHO)')
1230  FORMAT(/,' VALUES ',/,' RHO',7X,1PE17.10,/,
     1' GRAD',6X,1PE17.10,/,' DEL2',6X,1PE17.10,/,' G(X)',6X,1PE17.10,/,
     2' K(X)',6X,1PE17.10,/,' L(X)',6X,1PE17.10)
C
1330  FORMAT(/,' CRITICAL POINTS ')
1090  FORMAT(3(1PE16.8))
C
 9999  STOP
       END
      BLOCK DATA
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON /C2/ EPSD,AB(9,9),AM(9,10)
C
      COMMON /STUFF/ PI,RADIAN,DEGREE
C
      COMMON /UNITS/  INPT,IOUT,IWFN
C
      DATA INPT /5/, IOUT /6/, IWFN /10/
C
      DATA DEGREE /57.29577951307/
      DATA PI /3.14159265359/
      DATA RADIAN /0.017453292519/
C
C
      END
      DOUBLE PRECISION FUNCTION DASUM(N,DX,INCX)
C
C     TAKES THE SUM OF THE ABSOLUTE VALUES.
C     JACK DONGARRA, LINPACK, 3/11/78.
C
      DOUBLE PRECISION DX(1),DTEMP
      INTEGER I,INCX,M,MP1,N,NINCX
C
      DASUM = 0.0D0
      DTEMP = 0.0D0
      IF(N.LE.0)RETURN
      IF(INCX.EQ.1)GO TO 20
C
C        CODE FOR INCREMENT NOT EQUAL TO 1
C
      NINCX = N*INCX
      DO 10 I = 1,NINCX,INCX
        DTEMP = DTEMP + DABS(DX(I))
   10 CONTINUE
      DASUM = DTEMP
      RETURN
C
C        CODE FOR INCREMENT EQUAL TO 1
C
C
C        CLEAN-UP LOOP
C
   20 M = MOD(N,6)
      IF( M .EQ. 0 ) GO TO 40
      DO 30 I = 1,M
        DTEMP = DTEMP + DABS(DX(I))
   30 CONTINUE
      IF( N .LT. 6 ) GO TO 60
   40 MP1 = M + 1
      DO 50 I = MP1,N,6
        DTEMP = DTEMP + DABS(DX(I)) + DABS(DX(I + 1)) + DABS(DX(I + 2))
     *  + DABS(DX(I + 3)) + DABS(DX(I + 4)) + DABS(DX(I + 5))
   50 CONTINUE
   60 DASUM = DTEMP
      RETURN
      END
      SUBROUTINE DAXPY(N,DA,DX,INCX,DY,INCY)
      DOUBLE PRECISION DX(1),DY(1),DA
      INTEGER I,INCX,INCY,IXIY,M,MP1,N
      IF(N.LE.0)RETURN
      IF (DA .EQ. 0.0D0) RETURN
      IF(INCX.EQ.1.AND.INCY.EQ.1)GO TO 20
      IX = 1
      IY = 1
      IF(INCX.LT.0)IX = (-N+1)*INCX + 1
      IF(INCY.LT.0)IY = (-N+1)*INCY + 1
      DO 10 I = 1,N
        DY(IY) = DY(IY) + DA*DX(IX)
        IX = IX + INCX
        IY = IY + INCY
   10 CONTINUE
      RETURN
   20 M = MOD(N,4)
      IF( M .EQ. 0 ) GO TO 40
      DO 30 I = 1,M
        DY(I) = DY(I) + DA*DX(I)
   30 CONTINUE
      IF( N .LT. 4 ) RETURN
   40 MP1 = M + 1
      DO 50 I = MP1,N,4
        DY(I) = DY(I) + DA*DX(I)
        DY(I + 1) = DY(I + 1) + DA*DX(I + 1)
        DY(I + 2) = DY(I + 2) + DA*DX(I + 2)
        DY(I + 3) = DY(I + 3) + DA*DX(I + 3)
   50 CONTINUE
      RETURN
      END
      DOUBLE PRECISION FUNCTION DDOT(N,DX,INCX,DY,INCY)
C
C     FORMS THE DOT PRODUCT OF TWO VECTORS.
C     USES UNROLLED LOOPS FOR INCREMENTS EQUAL TO ONE.
C     JACK DONGARRA, LINPACK, 3/11/78.
C
      DOUBLE PRECISION DX(1),DY(1),DTEMP
      INTEGER I,INCX,INCY,IX,IY,M,MP1,N
C
      DDOT = 0.0D0
      DTEMP = 0.0D0
      IF(N.LE.0)RETURN
      IF(INCX.EQ.1.AND.INCY.EQ.1)GO TO 20
C
C        CODE FOR UNEQUAL INCREMENTS OR EQUAL INCREMENTS
C          NOT EQUAL TO 1
C
      IX = 1
      IY = 1
      IF(INCX.LT.0)IX = (-N+1)*INCX + 1
      IF(INCY.LT.0)IY = (-N+1)*INCY + 1
      DO 10 I = 1,N
        DTEMP = DTEMP + DX(IX)*DY(IY)
        IX = IX + INCX
        IY = IY + INCY
   10 CONTINUE
      DDOT = DTEMP
      RETURN
C
C        CODE FOR BOTH INCREMENTS EQUAL TO 1
C
C
C        CLEAN-UP LOOP
C
   20 M = MOD(N,5)
      IF( M .EQ. 0 ) GO TO 40
      DO 30 I = 1,M
        DTEMP = DTEMP + DX(I)*DY(I)
   30 CONTINUE
      IF( N .LT. 5 ) GO TO 60
   40 MP1 = M + 1
      DO 50 I = MP1,N,5
        DTEMP = DTEMP + DX(I)*DY(I) + DX(I + 1)*DY(I + 1) +
     *   DX(I + 2)*DY(I + 2) + DX(I + 3)*DY(I + 3) + DX(I + 4)*DY(I + 4)
   50 CONTINUE
   60 DDOT = DTEMP
      RETURN
      END
      SUBROUTINE DGAUS4
C+++
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C+++
C
C    FOR GAUSSIAN WAVEFUNCTIONS ONLY.  CALCULATES AT A GIVEN POINT
C    THE VALUE OF EACH MOLECULAR ORBITAL AND THE MO GRADIENT VECTOR
C    COMPONENTS.
C
C+++
C     THE FOLLOWING POINTERS HAVE BEEN ADDED TO AND REARRANGED
C     TO ALLOW QUICK RE-INITIALIZATION OF ALL PARTIAL DERIVATIVES
C     AS IN THE FIRST DO LOOP BELOW.
C     (JAN. 9 1984 , DOUGLAS MORGAN )
C+++
      COMMON /OFFSET/ ITYPE,ICENT,KATOM,IEORB,IE,IMO,ICHARG,IXC,IYC,IZC,
     1  IXX, IYY, IZZ,IXS,IYS,IZS,IRR,IR2,IP,IPSI,IGX,IGY,IGZ,ID2,
     +IGXX,IGXY,IGXZ,IGYY,IGYZ,IGZZ,IGXXX,IGXXY,IGXXZ,IGYYY,IGYYX,
     +IGYYZ,IGZZZ,IGZZX,IGZZY,IGXYZ,IGXXXX,IGXXXY,IGXXXZ,IGXXYY,
     +IGXXZZ,IGXXYZ,IGYYYY,IGYYYX,IGYYYZ,IGYYXZ,IGZZZZ,IGZZZX,
     +IGZZZY,IGZZYY,IGZZXY
      COMMON CO(400000),IC(400000),MODE,NCENT,NMO,NPRIMS
C
      DO 310 J=1,NMO
      CO(IPSI+J)=0.0
      CO(IGX+J)=0.0
      CO(IGY+J)=0.0
      CO(IGZ+J)=0.0
      CO(IGXX+J)=0.0
      CO(IGXY+J)=0.0
      CO(IGXZ+J)=0.0
      CO(IGYY+J)=0.0
      CO(IGYZ+J)=0.0
      CO(IGZZ+J)=0.
      CO(IGXXX+J)=0.0
      CO(IGXXY+J)=0.0
      CO(IGXXZ+J)=0.0
      CO(IGYYY+J)=0.0
      CO(IGYYX+J)=0.0
      CO(IGYYZ+J)=0.0
      CO(IGZZZ+J)=0.0
      CO(IGZZX+J)=0.0
      CO(IGZZY+J)=0.0
      CO(IGXYZ+J)=0.
      CO(IGXXXX+J)=0.0
      CO(IGXXXY+J)=0.0
      CO(IGXXXZ+J)=0.0
      CO(IGXXYY+J)=0.0
      CO(IGXXZZ+J)=0.
      CO(IGXXYZ+J)=0.0
      CO(IGYYYY+J)=0.0
      CO(IGYYYX+J)=0.0
      CO(IGYYYZ+J)=0.0
      CO(IGYYXZ+J)=0.0
      CO(IGZZZZ+J)=0.0
      CO(IGZZZX+J)=0.0
      CO(IGZZZY+J)=0.0
      CO(IGZZYY+J)=0.0
      CO(IGZZXY+J)=0.
  310 CONTINUE
      DO 360 I=1,NPRIMS
      K=IC(ICENT+I)
      CCOO=-CO(IE+I)*CO(IR2+K)
      S=0.D0
      IF(CCOO.GT.-170.D0) S=DEXP(CCOO)
      IF (S.LT.1.D-25) S = 0.D0
      X=CO(IXX+K)
      Y=CO(IYY+K)
      Z=CO(IZZ+K)
      XX=X*X
      XY=X*Y
      XZ=X*Z
      YY=Y*Y
      YZ=Y*Z
      ZZ=Z*Z
C+++
C     THE FOLLOWING ARE S ORBITAL EXPRESSIONS AND SOME OF
C     THEIR COMMON SUB-EXPRESSIONS.WHILE THIS CODEING SLOWS
C     DOWN THE COMPUTATION OF S ORBITAL PARTIAL DERIVATIVES
C     IT CONSIDERABLY SIMPLIFIES AND SPEEDS UP THE COMPUTATION
C     OF P AND D PARTIAL DERIVATIVES.(SORRY IF THE EQUATIONS
C     SEEM A BIT OBSCURE. JAN. 9 1984 , DOUGLAS MORGAN )
C+++
      AM2=-2.0*CO(IE+I)
      AA4S=AM2*AM2*S
      T1=AM2*AA4S
      XY8=T1*XY
      XZ8=T1*XZ
      YZ8=T1*YZ
      XX12=1+AM2*XX
      YY12=1+AM2*YY
      ZZ12=1+AM2*ZZ
      XX32=3+AM2*XX
      YY32=3+AM2*YY
      ZZ32=3+AM2*ZZ
      SX=AM2*X*S
      SY=AM2*Y*S
      SZ=AM2*Z*S
      SXX=AM2*S*XX12
      SXY=AA4S*XY
      SXZ=AA4S*XZ
      SYY=AM2*S*YY12
      SYZ=AA4S*YZ
      SZZ=AM2*S*ZZ12
      SXXX=AA4S*X*XX32
      SXXY=AA4S*Y*XX12
      SXXZ=AA4S*Z*XX12
      SYYY=AA4S*Y*YY32
      SYYX=AA4S*X*YY12
      SYYZ=AA4S*Z*YY12
      SZZZ=AA4S*Z*ZZ32
      SZZX=AA4S*X*ZZ12
      SZZY=AA4S*Y*ZZ12
      SXYZ=XY8*Z
      SXXXX=AA4S*(XX32*XX12+AM2*2.0*XX)
      SXXXY=XY8*XX32
      SXXXZ=XZ8*XX32
      SXXYY=AA4S*XX12*YY12
      SXXZZ=AA4S*XX12*ZZ12
      SXXYZ=YZ8*XX12
      SYYYY=AA4S*(YY32*YY12+AM2*2.0*YY)
      SYYYX=XY8*YY32
      SYYYZ=YZ8*YY32
      SYYXZ=XZ8*YY12
      SZZZZ=AA4S*(ZZ32*ZZ12+AM2*2.0*ZZ)
      SZZZX=XZ8*ZZ32
      SZZZY=YZ8*ZZ32
      SZZYY=AA4S*ZZ12*YY12
      SZZXY=XY8*ZZ12
      GO TO (361,362,363,364,365,366,367,368,369,370) IC(ITYPE+I)
C
C    PARTIAL DERIVATIVES OF S ORBITALS
C
  361 CONTINUE
      BF=S
      GX=SX
      GY=SY
      GZ=SZ
      GXX=SXX
      GXY=SXY
      GXZ=SXZ
      GYY=SYY
      GYZ=SYZ
      GZZ=SZZ
      GXXX=SXXX
      GXXY=SXXY
      GXXZ=SXXZ
      GYYY=SYYY
      GYYX=SYYX
      GYYZ=SYYZ
      GZZZ=SZZZ
      GZZX=SZZX
      GZZY=SZZY
      GXYZ=SXYZ
      GXXXX=SXXXX
      GXXXY=SXXXY
      GXXXZ=SXXXZ
      GXXYY=SXXYY
      GXXZZ=SXXZZ
      GXXYZ=SXXYZ
      GYYYY=SYYYY
      GYYYX=SYYYX
      GYYYZ=SYYYZ
      GYYXZ=SYYXZ
      GZZZZ=SZZZZ
      GZZZX=SZZZX
      GZZZY=SZZZY
      GZZYY=SZZYY
      GZZXY=SZZXY
      GO TO 340
C
C    PARTIAL DERIVATIVES OF PX ORBITALS
C
  362 CONTINUE
      BF=X*S
      GX=S+X*SX
      GY=X*SY
      GZ=X*SZ
      GXX=2.0D0*SX+X*SXX
      GXY=SY+X*SXY
      GXZ=SZ+X*SXZ
      GYY=X*SYY
      GYZ=X*SYZ
      GZZ=X*SZZ
      GXXX=3.0D0*SXX+X*SXXX
      GXXY=2.0D0*SXY+X*SXXY
      GXXZ=2.0D0*SXZ+X*SXXZ
      GYYY=X*SYYY
      GYYX=SYY+X*SYYX
      GYYZ=X*SYYZ
      GZZZ=X*SZZZ
      GZZX=SZZ+X*SZZX
      GZZY=X*SZZY
      GXYZ=SYZ+X*SXYZ
      GXXXX=4.0*SXXX+X*SXXXX
      GXXXY=3.0D0*SXXY+X*SXXXY
      GXXXZ=3.0D0*SXXZ+X*SXXXZ
      GXXYY=2.0D0*SYYX+X*SXXYY
      GXXZZ=2.0D0*SZZX+X*SXXZZ
      GXXYZ=2.0D0*SXYZ+X*SXXYZ
      GYYYY=X*SYYYY
      GYYYX=SYYY+X*SYYYX
      GYYYZ=X*SYYYZ
      GYYXZ=SYYZ+X*SYYXZ
      GZZZZ=X*SZZZZ
      GZZZX=SZZZ+X*SZZZX
      GZZZY=X*SZZZY
      GZZYY=X*SZZYY
      GZZXY=SZZY+X*SZZXY
      GO TO 340
C
C    PARTIAL DERIVATIVES OF PY ORBITALS
C
  363 CONTINUE
      BF=Y*S
      GX=Y*SX
      GY=S+Y*SY
      GZ=Y*SZ
      GXX=Y*SXX
      GXY=SX+Y*SXY
      GXZ=Y*SXZ
      GYY=2.0D0*SY+Y*SYY
      GYZ=SZ+Y*SYZ
      GZZ=Y*SZZ
      GXXX=Y*SXXX
      GXXY=SXX+Y*SXXY
      GXXZ=Y*SXXZ
      GYYY=3.0D0*SYY+Y*SYYY
      GYYX=2.0D0*SXY+Y*SYYX
      GYYZ=2.0D0*SYZ+Y*SYYZ
      GZZZ=Y*SZZZ
      GZZX=Y*SZZX
      GZZY=SZZ+Y*SZZY
      GXYZ=SXZ+Y*SXYZ
      GXXXX=Y*SXXXX
      GXXXY=SXXX+Y*SXXXY
      GXXXZ=Y*SXXXZ
      GXXYY=2.0D0*SXXY+Y*SXXYY
      GXXZZ=Y*SXXZZ
      GXXYZ=SXXZ+Y*SXXYZ
      GYYYY=4.0D0*SYYY+Y*SYYYY
      GYYYX=3.0D0*SYYX+Y*SYYYX
      GYYYZ=3.0D0*SYYZ+Y*SYYYZ
      GYYXZ=2.0D0*SXYZ+Y*SYYXZ
      GZZZZ=Y*SZZZZ
      GZZZX=Y*SZZZX
      GZZZY=SZZZ+Y*SZZZY
      GZZYY=2.0D0*SZZY+Y*SZZYY
      GZZXY=SZZX+Y*SZZXY
      GO TO 340
C
C    PARTIAL DERIVATIVES OF PZ ORBITALS
C
  364 CONTINUE
      BF=Z*S
      GX=Z*SX
      GY=Z*SY
      GZ=S+Z*SZ
      GXX=Z*SXX
      GXY=Z*SXY
      GXZ=SX+Z*SXZ
      GYY=Z*SYY
      GYZ=SY+Z*SYZ
      GZZ=2.0D0*SZ+Z*SZZ
      GXXX=Z*SXXX
      GXXY=Z*SXXY
      GXXZ=SXX+Z*SXXZ
      GYYY=Z*SYYY
      GYYX=Z*SYYX
      GYYZ=SYY+Z*SYYZ
      GZZZ=3.0D0*SZZ+Z*SZZZ
      GZZX=2.0D0*SXZ+Z*SZZX
      GZZY=2.0D0*SYZ+Z*SZZY
      GXYZ=SXY+Z*SXYZ
      GXXXX=Z*SXXXX
      GXXXY=Z*SXXXY
      GXXXZ=SXXX+Z*SXXXZ
      GXXYY=Z*SXXYY
      GXXZZ=2.0D0*SXXZ+Z*SXXZZ
      GXXYZ=SXXY+Z*SXXYZ
      GYYYY=Z*SYYYY
      GYYYX=Z*SYYYX
      GYYYZ=SYYY+Z*SYYYZ
      GYYXZ=SYYX+Z*SYYXZ
      GZZZZ=4.0D0*SZZZ+Z*SZZZZ
      GZZZX=3.0D0*SZZX+Z*SZZZX
      GZZZY=3.0D0*SZZY+Z*SZZZY
      GZZYY=2.0D0*SYYZ+Z*SZZYY
      GZZXY=2.0D0*SXYZ+Z*SZZXY
      GO TO 340
C
C    PARTIAL DERIVATIVES OF DXX ORBITALS
C
  365 CONTINUE
      X2=2.0D0*X
      X4=4.0D0*X
      BF=XX*S
      GX=X2*S+XX*SX
      GY=XX*SY
      GZ=XX*SZ
      GXX=2.0D0*S+X4*SX+XX*SXX
      GXY=X2*SY+XX*SXY
      GXZ=X2*SZ+XX*SXZ
      GYY=XX*SYY
      GYZ=XX*SYZ
      GZZ=XX*SZZ
      GXXX=6.0D0*(SX+X*SXX)+XX*SXXX
      GXXY=2.0D0*SY+X4*SXY+XX*SXXY
      GXXZ=2.0D0*SZ+X4*SXZ+XX*SXXZ
      GYYY=XX*SYYY
      GYYX=X2*SYY+XX*SYYX
      GYYZ=XX*SYYZ
      GZZZ=XX*SZZZ
      GZZX=X2*SZZ+XX*SZZX
      GZZY=XX*SZZY
      GXYZ=X2*SYZ+XX*SXYZ
      GXXXX=12.0D0*SXX+8.0D0*X*SXXX+XX*SXXXX
      GXXXY=6.0D0*(SXY+X*SXXY)+XX*SXXXY
      GXXXZ=6.0D0*(SXZ+X*SXXZ)+XX*SXXXZ
      GXXYY=2.0D0*SYY+X4*SYYX+XX*SXXYY
      GXXZZ=2.0D0*SZZ+X4*SZZX+XX*SXXZZ
      GXXYZ=2.0D0*SYZ+X4*SXYZ+XX*SXXYZ
      GYYYY=XX*SYYYY
      GYYYX=X2*SYYY+XX*SYYYX
      GYYYZ=XX*SYYYZ
      GYYXZ=X2*SYYZ+XX*SYYXZ
      GZZZZ=XX*SZZZZ
      GZZZX=X2*SZZZ+XX*SZZZX
      GZZZY=XX*SZZZY
      GZZYY=XX*SZZYY
      GZZXY=X2*SZZY+XX*SZZXY
      GO TO 340
C
C    PARTIAL DERIVATIVES OF DYY ORBITALS
C
  366 CONTINUE
      Y2=2.0D0*Y
      Y4=4.0D0*Y
      BF=YY*S
      GX=YY*SX
      GY=Y2*S+YY*SY
      GZ=YY*SZ
      GXX=YY*SXX
      GXY=Y2*SX+YY*SXY
      GXZ=YY*SXZ
      GYY=2.0D0*S+Y4*SY+YY*SYY
      GYZ=Y2*SZ+YY*SYZ
      GZZ=YY*SZZ
      GXXX=YY*SXXX
      GXXY=Y2*SXX+YY*SXXY
      GXXZ=YY*SXXZ
      GYYY=6.0D0*(SY+Y*SYY)+YY*SYYY
      GYYX=2.0D0*SX+Y4*SXY+YY*SYYX
      GYYZ=2.0D0*SZ+Y4*SYZ+YY*SYYZ
      GZZZ=YY*SZZZ
      GZZX=YY*SZZX
      GZZY=Y2*SZZ+YY*SZZY
      GXYZ=Y2*SXZ+YY*SXYZ
      GXXXX=YY*SXXXX
      GXXXY=Y2*SXXX+YY*SXXXY
      GXXXZ=YY*SXXXZ
      GXXYY=2.0D0*SXX+Y4*SXXY+YY*SXXYY
      GXXZZ=YY*SXXZZ
      GXXYZ=Y2*SXXZ+YY*SXXYZ
      GYYYY=12.0D0*SYY+8.0D0*Y*SYYY+YY*SYYYY
      GYYYX=6.0D0*(SXY+Y*SYYX)+YY*SYYYX
      GYYYZ=6.0D0*(SYZ+Y*SYYZ)+YY*SYYYZ
      GYYXZ=2.0D0*SXZ+Y4*SXYZ+YY*SYYXZ
      GZZZZ=YY*SZZZZ
      GZZZX=YY*SZZZX
      GZZZY=Y2*SZZZ+YY*SZZZY
      GZZYY=2.0D0*SZZ+Y4*SZZY+YY*SZZYY
      GZZXY=Y2*SZZX+YY*SZZXY
      GO TO 340
C
C    PARTIAL DERIVATIVES OF DZZ ORBITALS
C
  367 CONTINUE
      Z2=2.0D0*Z
      Z4=4.0D0*Z
      BF=ZZ*S
      GX=ZZ*SX
      GY=ZZ*SY
      GZ=Z2*S+ZZ*SZ
      GXX=ZZ*SXX
      GXY=ZZ*SXY
      GXZ=Z2*SX+ZZ*SXZ
      GYY=ZZ*SYY
      GYZ=Z2*SY+ZZ*SYZ
      GZZ=2.0D0*S+Z4*SZ+ZZ*SZZ
      GXXX=ZZ*SXXX
      GXXY=ZZ*SXXY
      GXXZ=Z2*SXX+ZZ*SXXZ
      GYYY=ZZ*SYYY
      GYYX=ZZ*SYYX
      GYYZ=Z2*SYY+ZZ*SYYZ
      GZZZ=6.0D0*(SZ+Z*SZZ)+ZZ*SZZZ
      GZZX=2.0D0*SX+Z4*SXZ+ZZ*SZZX
      GZZY=2.0D0*SY+Z4*SYZ+ZZ*SZZY
      GXYZ=Z2*SXY+ZZ*SXYZ
      GXXXX=ZZ*SXXXX
      GXXXY=ZZ*SXXXY
      GXXXZ=Z2*SXXX+ZZ*SXXXZ
      GXXYY=ZZ*SXXYY
      GXXZZ=2.0D0*SXX+Z4*SXXZ+ZZ*SXXZZ
      GXXYZ=Z2*SXXY+ZZ*SXXYZ
      GYYYY=ZZ*SYYYY
      GYYYX=ZZ*SYYYX
      GYYYZ=Z2*SYYY+ZZ*SYYYZ
      GYYXZ=Z2*SYYX+ZZ*SYYXZ
      GZZZZ=12.0D0*SZZ+8.0D0*Z*SZZZ+ZZ*SZZZZ
      GZZZX=6.0D0*(SXZ+Z*SZZX)+ZZ*SZZZX
      GZZZY=6.0D0*(SYZ+Z*SZZY)+ZZ*SZZZY
      GZZYY=2.0D0*SYY+Z4*SYYZ+ZZ*SZZYY
      GZZXY=2.0D0*SXY+Z4*SXYZ+ZZ*SZZXY
      GO TO 340
C
C    PARTIAL DERIVATIVES OF DXY ORBITALS
C
  368 CONTINUE
      X2=2.0D0*X
      Y2=2.0D0*Y
      BF=XY*S
      GX=Y*S+XY*SX
      GY=X*S+XY*SY
      GZ=XY*SZ
      GXX=Y2*SX+XY*SXX
      GXY=S+Y*SY+X*SX+XY*SXY
      GXZ=Y*SZ+XY*SXZ
      GYY=X2*SY+XY*SYY
      GYZ=X*SZ+XY*SYZ
      GZZ=XY*SZZ
      GXXX=3.0D0*Y*SXX+XY*SXXX
      GXXY=2.0D0*SX+Y2*SXY+X*SXX+XY*SXXY
      GXXZ=Y2*SXZ+XY*SXXZ
      GYYY=3.0D0*X*SYY+XY*SYYY
      GYYX=2.0D0*SY+X2*SXY+Y*SYY+XY*SYYX
      GYYZ=X2*SYZ+XY*SYYZ
      GZZZ=XY*SZZZ
      GZZX=Y*SZZ+XY*SZZX
      GZZY=X*SZZ+XY*SZZY
      GXYZ=SZ+Y*SYZ+X*SXZ+XY*SXYZ
      GXXXX=4.0D0*Y*SXXX+XY*SXXXX
      GXXXY=3.0D0*(SXX+Y*SXXY)+X*SXXX+XY*SXXXY
      GXXXZ=3.0D0*Y*SXXZ+XY*SXXXZ
      GXXYY=4.0D0*SXY+Y2*SYYX+X2*SXXY+XY*SXXYY
      GXXZZ=Y2*SZZX+XY*SXXZZ
      GXXYZ=2.0D0*SXZ+Y2*SXYZ+X*SXXZ+XY*SXXYZ
      GYYYY=4.0D0*X*SYYY+XY*SYYYY
      GYYYX=3.0D0*(SYY+X*SYYX)+Y*SYYY+XY*SYYYX
      GYYYZ=3.0D0*X*SYYZ+XY*SYYYZ
      GYYXZ=2.0D0*SYZ+X2*SXYZ+Y*SYYZ+XY*SYYXZ
      GZZZZ=XY*SZZZZ
      GZZZX=Y*SZZZ+XY*SZZZX
      GZZZY=X*SZZZ+XY*SZZZY
      GZZYY=X2*SZZY+XY*SZZYY
      GZZXY=SZZ+Y*SZZY+X*SZZX+XY*SZZXY
      GO TO 340
C
C    PARTIAL DERIVATIVES OF DXZ ORBITALS
C
  369 CONTINUE
      X2=2.0D0*X
      Z2=2.0D0*Z
      BF=XZ*S
      GX=Z*S+XZ*SX
      GY=XZ*SY
      GZ=X*S+XZ*SZ
      GXX=Z2*SX+XZ*SXX
      GXY=Z*SY+XZ*SXY
      GXZ=S+Z*SZ+X*SX+XZ*SXZ
      GYY=XZ*SYY
      GYZ=X*SY+XZ*SYZ
      GZZ=X2*SZ+XZ*SZZ
      GXXX=3.0D0*Z*SXX+XZ*SXXX
      GXXY=Z2*SXY+XZ*SXXY
      GXXZ=2.0D0*SX+Z2*SXZ+X*SXX+XZ*SXXZ
      GYYY=XZ*SYYY
      GYYX=Z*SYY+XZ*SYYX
      GYYZ=X*SYY+XZ*SYYZ
      GZZZ=3.0D0*X*SZZ+XZ*SZZZ
      GZZX=2.0D0*SZ+X2*SXZ+Z*SZZ+XZ*SZZX
      GZZY=X2*SYZ+XZ*SZZY
      GXYZ=SY+Z*SYZ+X*SXY+XZ*SXYZ
      GXXXX=4.0D0*Z*SXXX+XZ*SXXXX
      GXXXY=3.0D0*Z*SXXY+XZ*SXXXY
      GXXXZ=3.0D0*(SXX+Z*SXXZ)+X*SXXX+XZ*SXXXZ
      GXXYY=Z2*SYYX+XZ*SXXYY
      GXXZZ=4.0D0*SXZ+Z2*SZZX+X2*SXXZ+XZ*SXXZZ
      GXXYZ=2.0D0*SXY+Z2*SXYZ+X*SXXY+XZ*SXXYZ
      GYYYY=XZ*SYYYY
      GYYYX=Z*SYYY+XZ*SYYYX
      GYYYZ=X*SYYY+XZ*SYYYZ
      GYYXZ=SYY+Z*SYYZ+X*SYYX+XZ*SYYXZ
      GZZZZ=4.0D0*X*SZZZ+XZ*SZZZZ
      GZZZX=3.0D0*(SZZ+X*SZZX)+Z*SZZZ+XZ*SZZZX
      GZZZY=3.0D0*X*SZZY+XZ*SZZZY
      GZZYY=X2*SYYZ+XZ*SZZYY
      GZZXY=2.0D0*SYZ+X2*SXYZ+Z*SZZY+XZ*SZZXY
      GO TO 340
C
C    PARTIAL DERIVATIVES OF DYZ ORBITALS
C
  370 CONTINUE
      Y2=2.0D0*Y
      Z2=2.0D0*Z
      BF=YZ*S
      GX=YZ*SX
      GY=Z*S+YZ*SY
      GZ=Y*S+YZ*SZ
      GXX=YZ*SXX
      GXY=Z*SX+YZ*SXY
      GXZ=Y*SX+YZ*SXZ
      GYY=Z2*SY+YZ*SYY
      GYZ=S+Z*SZ+Y*SY+YZ*SYZ
      GZZ=Y2*SZ+YZ*SZZ
      GXXX=YZ*SXXX
      GXXY=Z*SXX+YZ*SXXY
      GXXZ=Y*SXX+YZ*SXXZ
      GYYY=3.0D0*Z*SYY+YZ*SYYY
      GYYX=Z2*SXY+YZ*SYYX
      GYYZ=2.0D0*SY+Z2*SYZ+Y*SYY+YZ*SYYZ
      GZZZ=3.0D0*Y*SZZ+YZ*SZZZ
      GZZX=Y2*SXZ+YZ*SZZX
      GZZY=2.0D0*SZ+Y2*SYZ+Z*SZZ+YZ*SZZY
      GXYZ=SX+Z*SXZ+Y*SXY+YZ*SXYZ
      GXXXX=YZ*SXXXX
      GXXXY=Z*SXXX+YZ*SXXXY
      GXXXZ=Y*SXXX+YZ*SXXXZ
      GXXYY=Z2*SXXY+YZ*SXXYY
      GXXZZ=Y2*SXXZ+YZ*SXXZZ
      GXXYZ=SXX+Z*SXXZ+Y*SXXY+YZ*SXXYZ
      GYYYY=4.0D0*Z*SYYY+YZ*SYYYY
      GYYYX=3.0D0*Z*SYYX+YZ*SYYYX
      GYYYZ=3.0D0*(SYY+Z*SYYZ)+Y*SYYY+YZ*SYYYZ
      GYYXZ=2.0D0*SXY+Z2*SXYZ+Y*SYYX+YZ*SYYXZ
      GZZZZ=4.0D0*Y*SZZZ+YZ*SZZZZ
      GZZZX=3.0D0*Y*SZZX+YZ*SZZZX
      GZZZY=3.0D0*(SZZ+Y*SZZY)+Z*SZZZ+YZ*SZZZY
      GZZYY=4.0D0*SYZ+Z2*SZZY+Y2*SYYZ+YZ*SZZYY
      GZZXY=2.0D0*SXZ+Y2*SXYZ+Z*SZZX+YZ*SZZXY
  340 CONTINUE
C
C    CALCULATE DENSITY AND GRADIENT COMPONENTS FOR EACH MO.
C
      DO 360 J=1,NMO
      CIJ=CO(IMO+NPRIMS*(J-1)+I)
      CO(IPSI+J)=CO(IPSI+J)+CIJ*BF
      CO(IGX+J)=CO(IGX+J)+CIJ*GX
      CO(IGY+J)=CO(IGY+J)+CIJ*GY
      CO(IGZ+J)=CO(IGZ+J)+CIJ*GZ
      CO(IGXX+J)=CO(IGXX+J)+CIJ*GXX
      CO(IGXY+J)=CO(IGXY+J)+CIJ*GXY
      CO(IGXZ+J)=CO(IGXZ+J)+CIJ*GXZ
      CO(IGYY+J)=CO(IGYY+J)+CIJ*GYY
      CO(IGYZ+J)=CO(IGYZ+J)+CIJ*GYZ
      CO(IGZZ+J)=CO(IGZZ+J)+CIJ*GZZ
      CO(IGXXX+J)=CO(IGXXX+J)+CIJ*GXXX
      CO(IGXXY+J)=CO(IGXXY+J)+CIJ*GXXY
      CO(IGXXZ+J)=CO(IGXXZ+J)+CIJ*GXXZ
      CO(IGYYY+J)=CO(IGYYY+J)+CIJ*GYYY
      CO(IGYYX+J)=CO(IGYYX+J)+CIJ*GYYX
      CO(IGYYZ+J)=CO(IGYYZ+J)+CIJ*GYYZ
      CO(IGZZZ+J)=CO(IGZZZ+J)+CIJ*GZZZ
      CO(IGZZX+J)=CO(IGZZX+J)+CIJ*GZZX
      CO(IGZZY+J)=CO(IGZZY+J)+CIJ*GZZY
      CO(IGXYZ+J)=CO(IGXYZ+J)+CIJ*GXYZ
      CO(IGXXXX+J)=CO(IGXXXX+J)+CIJ*GXXXX
      CO(IGXXXY+J)=CO(IGXXXY+J)+CIJ*GXXXY
      CO(IGXXXZ+J)=CO(IGXXXZ+J)+CIJ*GXXXZ
      CO(IGXXYY+J)=CO(IGXXYY+J)+CIJ*GXXYY
      CO(IGXXZZ+J)=CO(IGXXZZ+J)+CIJ*GXXZZ
      CO(IGXXYZ+J)=CO(IGXXYZ+J)+CIJ*GXXYZ
      CO(IGYYYY+J)=CO(IGYYYY+J)+CIJ*GYYYY
      CO(IGYYYX+J)=CO(IGYYYX+J)+CIJ*GYYYX
      CO(IGYYYZ+J)=CO(IGYYYZ+J)+CIJ*GYYYZ
      CO(IGYYXZ+J)=CO(IGYYXZ+J)+CIJ*GYYXZ
      CO(IGZZZZ+J)=CO(IGZZZZ+J)+CIJ*GZZZZ
      CO(IGZZZX+J)=CO(IGZZZX+J)+CIJ*GZZZX
      CO(IGZZZY+J)=CO(IGZZZY+J)+CIJ*GZZZY
      CO(IGZZYY+J)=CO(IGZZYY+J)+CIJ*GZZYY
      CO(IGZZXY+J)=CO(IGZZXY+J)+CIJ*GZZXY
  360 CONTINUE
      RETURN
      END
      SUBROUTINE DGECO(A,LDA,N,IPVT,RCOND,Z)
      INTEGER LDA,N,IPVT(1)
      DOUBLE PRECISION A(LDA,1),Z(1)
      DOUBLE PRECISION RCOND
C
C     DGECO FACTORS A DOUBLE PRECISION MATRIX BY GAUSSIAN ELIMINATION
C     AND ESTIMATES THE CONDITION OF THE MATRIX.
C
C     IF  RCOND  IS NOT NEEDED, DGEFA IS SLIGHTLY FASTER.
C     TO SOLVE  A*X = B , FOLLOW DGECO BY DGESL.
C     TO COMPUTE  INVERSE(A)*C , FOLLOW DGECO BY DGESL.
C     TO COMPUTE  DETERMINANT(A) , FOLLOW DGECO BY DGEDI.
C     TO COMPUTE  INVERSE(A) , FOLLOW DGECO BY DGEDI.
C
C     ON ENTRY
C
C        A       DOUBLE PRECISION(LDA, N)
C                THE MATRIX TO BE FACTORED.
C
C        LDA     INTEGER
C                THE LEADING DIMENSION OF THE ARRAY  A .
C
C        N       INTEGER
C                THE ORDER OF THE MATRIX  A .
C
C     ON RETURN
C
C        A       AN UPPER TRIANGULAR MATRIX AND THE MULTIPLIERS
C                WHICH WERE USED TO OBTAIN IT.
C                THE FACTORIZATION CAN BE WRITTEN  A = L*U  WHERE
C                L  IS A PRODUCT OF PERMUTATION AND UNIT LOWER
C                TRIANGULAR MATRICES AND  U  IS UPPER TRIANGULAR.
C
C        IPVT    INTEGER(N)
C                AN INTEGER VECTOR OF PIVOT INDICES.
C
C        RCOND   DOUBLE PRECISION
C                AN ESTIMATE OF THE RECIPROCAL CONDITION OF  A .
C                FOR THE SYSTEM  A*X = B , RELATIVE PERTURBATIONS
C                IN  A  AND  B  OF SIZE  EPSILON  MAY CAUSE
C                RELATIVE PERTURBATIONS IN  X  OF SIZE  EPSILON/RCOND .
C                IF  RCOND  IS SO SMALL THAT THE LOGICAL EXPRESSION
C                           1.0 + RCOND .EQ. 1.0
C                IS TRUE, THEN  A  MAY BE SINGULAR TO WORKING
C                PRECISION.  IN PARTICULAR,  RCOND  IS ZERO  IF
C                EXACT SINGULARITY IS DETECTED OR THE ESTIMATE
C                UNDERFLOWS.
C
C        Z       DOUBLE PRECISION(N)
C                A WORK VECTOR WHOSE CONTENTS ARE USUALLY UNIMPORTANT.
C                IF  A  IS CLOSE TO A SINGULAR MATRIX, THEN  Z  IS
C                AN APPROXIMATE NULL VECTOR IN THE SENSE THAT
C                NORM(A*Z) = RCOND*NORM(A)*NORM(Z) .
C
C     LINPACK. THIS VERSION DATED 08/14/78 .
C     CLEVE MOLER, UNIVERSITY OF NEW MEXICO, ARGONNE NATIONAL LAB.
C
C     SUBROUTINES AND FUNCTIONS
C
C     LINPACK DGEFA
C     BLAS DAXPY,DDOT,DSCAL,DASUM
C     FORTRAN DABS,DMAX1,DSIGN
C
C     INTERNAL VARIABLES
C
      DOUBLE PRECISION DDOT,EK,T,WK,WKM
      DOUBLE PRECISION ANORM,S,DASUM,SM,YNORM
      INTEGER INFO,J,K,KB,KP1,L
C
C
C     COMPUTE 1-NORM OF A
C
      ANORM = 0.0D0
      DO 10 J = 1, N
         ANORM = DMAX1(ANORM,DASUM(N,A(1,J),1))
   10 CONTINUE
C
C     FACTOR
C
      CALL DGEFA(A,LDA,N,IPVT,INFO)
C
C     RCOND = 1/(NORM(A)*(ESTIMATE OF NORM(INVERSE(A)))) .
C     ESTIMATE = NORM(Z)/NORM(Y) WHERE  A*Z = Y  AND  TRANS(A)*Y = E .
C     TRANS(A)  IS THE TRANSPOSE OF A .  THE COMPONENTS OF  E  ARE
C     CHOSEN TO CAUSE MAXIMUM LOCAL GROWTH IN THE ELEMENTS OF W  WHERE
C     TRANS(U)*W = E .  THE VECTORS ARE FREQUENTLY RESCALED TO AVOID
C     OVERFLOW.
C
C     SOLVE TRANS(U)*W = E
C
      EK = 1.0D0
      DO 20 J = 1, N
         Z(J) = 0.0D0
   20 CONTINUE
      DO 100 K = 1, N
         IF (Z(K) .NE. 0.0D0) EK = DSIGN(EK,-Z(K))
         IF (DABS(EK-Z(K)) .LE. DABS(A(K,K))) GO TO 30
            S = DABS(A(K,K))/DABS(EK-Z(K))
            CALL DSCAL(N,S,Z,1)
            EK = S*EK
   30    CONTINUE
         WK = EK - Z(K)
         WKM = -EK - Z(K)
         S = DABS(WK)
         SM = DABS(WKM)
         IF (A(K,K) .EQ. 0.0D0) GO TO 40
            WK = WK/A(K,K)
            WKM = WKM/A(K,K)
         GO TO 50
   40    CONTINUE
            WK = 1.0D0
            WKM = 1.0D0
   50    CONTINUE
         KP1 = K + 1
         IF (KP1 .GT. N) GO TO 90
            DO 60 J = KP1, N
               SM = SM + DABS(Z(J)+WKM*A(K,J))
               Z(J) = Z(J) + WK*A(K,J)
               S = S + DABS(Z(J))
   60       CONTINUE
            IF (S .GE. SM) GO TO 80
               T = WKM - WK
               WK = WKM
               DO 70 J = KP1, N
                  Z(J) = Z(J) + T*A(K,J)
   70          CONTINUE
   80       CONTINUE
   90    CONTINUE
         Z(K) = WK
  100 CONTINUE
      S = 1.0D0/DASUM(N,Z,1)
      CALL DSCAL(N,S,Z,1)
C
C     SOLVE TRANS(L)*Y = W
C
      DO 120 KB = 1, N
         K = N + 1 - KB
         IF (K .LT. N) Z(K) = Z(K) + DDOT(N-K,A(K+1,K),1,Z(K+1),1)
         IF (DABS(Z(K)) .LE. 1.0D0) GO TO 110
            S = 1.0D0/DABS(Z(K))
            CALL DSCAL(N,S,Z,1)
  110    CONTINUE
         L = IPVT(K)
         T = Z(L)
         Z(L) = Z(K)
         Z(K) = T
  120 CONTINUE
      S = 1.0D0/DASUM(N,Z,1)
      CALL DSCAL(N,S,Z,1)
C
      YNORM = 1.0D0
C
C     SOLVE L*V = Y
C
      DO 140 K = 1, N
         L = IPVT(K)
         T = Z(L)
         Z(L) = Z(K)
         Z(K) = T
         IF (K .LT. N) CALL DAXPY(N-K,T,A(K+1,K),1,Z(K+1),1)
         IF (DABS(Z(K)) .LE. 1.0D0) GO TO 130
            S = 1.0D0/DABS(Z(K))
            CALL DSCAL(N,S,Z,1)
            YNORM = S*YNORM
  130    CONTINUE
  140 CONTINUE
      S = 1.0D0/DASUM(N,Z,1)
      CALL DSCAL(N,S,Z,1)
      YNORM = S*YNORM
C
C     SOLVE  U*Z = V
C
      DO 160 KB = 1, N
         K = N + 1 - KB
         IF (DABS(Z(K)) .LE. DABS(A(K,K))) GO TO 150
            S = DABS(A(K,K))/DABS(Z(K))
            CALL DSCAL(N,S,Z,1)
            YNORM = S*YNORM
  150    CONTINUE
         IF (A(K,K) .NE. 0.0D0) Z(K) = Z(K)/A(K,K)
         IF (A(K,K) .EQ. 0.0D0) Z(K) = 1.0D0
         T = -Z(K)
         CALL DAXPY(K-1,T,A(1,K),1,Z(1),1)
  160 CONTINUE
C     MAKE ZNORM = 1.0
      S = 1.0D0/DASUM(N,Z,1)
      CALL DSCAL(N,S,Z,1)
      YNORM = S*YNORM
C
      IF (ANORM .NE. 0.0D0) RCOND = YNORM/ANORM
      IF (ANORM .EQ. 0.0D0) RCOND = 0.0D0
      RETURN
      END
      SUBROUTINE DGEDI(A,LDA,N,IPVT,DET,WORK,JOB)
      INTEGER LDA,N,IPVT(1),JOB
      DOUBLE PRECISION A(LDA,1),DET(2),WORK(1)
C
C     DGEDI COMPUTES THE DETERMINANT AND INVERSE OF A MATRIX
C     USING THE FACTORS COMPUTED BY DGECO OR DGEFA.
C
C     ON ENTRY
C
C        A       DOUBLE PRECISION(LDA, N)
C                THE OUTPUT FROM DGECO OR DGEFA.
C
C        LDA     INTEGER
C                THE LEADING DIMENSION OF THE ARRAY  A .
C
C        N       INTEGER
C                THE ORDER OF THE MATRIX  A .
C
C        IPVT    INTEGER(N)
C                THE PIVOT VECTOR FROM DGECO OR DGEFA.
C
C        WORK    DOUBLE PRECISION(N)
C                WORK VECTOR.  CONTENTS DESTROYED.
C
C        JOB     INTEGER
C                = 11   BOTH DETERMINANT AND INVERSE.
C                = 01   INVERSE ONLY.
C                = 10   DETERMINANT ONLY.
C
C     ON RETURN
C
C        A       INVERSE OF ORIGINAL MATRIX IF REQUESTED.
C                OTHERWISE UNCHANGED.
C
C        DET     DOUBLE PRECISION(2)
C                DETERMINANT OF ORIGINAL MATRIX IF REQUESTED.
C                OTHERWISE NOT REFERENCED.
C                DETERMINANT = DET(1) * 10.0**DET(2)
C                WITH  1.0 .LE. DABS(DET(1)) .LT. 10.0
C                OR  DET(1) .EQ. 0.0 .
C
C     ERROR CONDITION
C
C        A DIVISION BY ZERO WILL OCCUR IF THE INPUT FACTOR CONTAINS
C        A ZERO ON THE DIAGONAL AND THE INVERSE IS REQUESTED.
C        IT WILL NOT OCCUR IF THE SUBROUTINES ARE CALLED CORRECTLY
C        AND IF DGECO HAS SET RCOND .GT. 0.0 OR DGEFA HAS SET
C        INFO .EQ. 0 .
C
C     LINPACK. THIS VERSION DATED 08/14/78 .
C     CLEVE MOLER, UNIVERSITY OF NEW MEXICO, ARGONNE NATIONAL LAB.
C
C     SUBROUTINES AND FUNCTIONS
C
C     BLAS DAXPY,DSCAL,DSWAP
C     FORTRAN DABS,MOD
C
C     INTERNAL VARIABLES
C
      DOUBLE PRECISION T
      DOUBLE PRECISION TEN
      INTEGER I,J,K,KB,KP1,L,NM1
C
C
C     COMPUTE DETERMINANT
C
      IF (JOB/10 .EQ. 0) GO TO 70
         DET(1) = 1.0D0
         DET(2) = 0.0D0
         TEN = 10.0D0
         DO 50 I = 1, N
            IF (IPVT(I) .NE. I) DET(1) = -DET(1)
            DET(1) = A(I,I)*DET(1)
C        ...EXIT
            IF (DET(1) .EQ. 0.0D0) GO TO 60
   10       IF (DABS(DET(1)) .GE. 1.0D0) GO TO 20
               DET(1) = TEN*DET(1)
               DET(2) = DET(2) - 1.0D0
            GO TO 10
   20       CONTINUE
   30       IF (DABS(DET(1)) .LT. TEN) GO TO 40
               DET(1) = DET(1)/TEN
               DET(2) = DET(2) + 1.0D0
            GO TO 30
   40       CONTINUE
   50    CONTINUE
   60    CONTINUE
   70 CONTINUE
C
C     COMPUTE INVERSE(U)
C
      IF (MOD(JOB,10) .EQ. 0) GO TO 150
         DO 100 K = 1, N
            A(K,K) = 1.0D0/A(K,K)
            T = -A(K,K)
            CALL DSCAL(K-1,T,A(1,K),1)
            KP1 = K + 1
            IF (N .LT. KP1) GO TO 90
            DO 80 J = KP1, N
               T = A(K,J)
               A(K,J) = 0.0D0
               CALL DAXPY(K,T,A(1,K),1,A(1,J),1)
   80       CONTINUE
   90       CONTINUE
  100    CONTINUE
C
C        FORM INVERSE(U)*INVERSE(L)
C
         NM1 = N - 1
         IF (NM1 .LT. 1) GO TO 140
         DO 130 KB = 1, NM1
            K = N - KB
            KP1 = K + 1
            DO 110 I = KP1, N
               WORK(I) = A(I,K)
               A(I,K) = 0.0D0
  110       CONTINUE
            DO 120 J = KP1, N
               T = WORK(J)
               CALL DAXPY(N,T,A(1,J),1,A(1,K),1)
  120       CONTINUE
            L = IPVT(K)
            IF (L .NE. K) CALL DSWAP(N,A(1,K),1,A(1,L),1)
  130    CONTINUE
  140    CONTINUE
  150 CONTINUE
      RETURN
      END
      SUBROUTINE DGEFA(A,LDA,N,IPVT,INFO)
      INTEGER LDA,N,IPVT(1),INFO
      DOUBLE PRECISION A(LDA,1)
C
C     DGEFA FACTORS A DOUBLE PRECISION MATRIX BY GAUSSIAN ELIMINATION.
C
C     DGEFA IS USUALLY CALLED BY DGECO, BUT IT CAN BE CALLED
C     DIRECTLY WITH A SAVING IN TIME IF  RCOND  IS NOT NEEDED.
C     (TIME FOR DGECO) = (1 + 9/N)*(TIME FOR DGEFA) .
C
C     ON ENTRY
C
C        A       DOUBLE PRECISION(LDA, N)
C                THE MATRIX TO BE FACTORED.
C
C        LDA     INTEGER
C                THE LEADING DIMENSION OF THE ARRAY  A .
C
C        N       INTEGER
C                THE ORDER OF THE MATRIX  A .
C
C     ON RETURN
C
C        A       AN UPPER TRIANGULAR MATRIX AND THE MULTIPLIERS
C                WHICH WERE USED TO OBTAIN IT.
C                THE FACTORIZATION CAN BE WRITTEN  A = L*U  WHERE
C                L  IS A PRODUCT OF PERMUTATION AND UNIT LOWER
C                TRIANGULAR MATRICES AND  U  IS UPPER TRIANGULAR.
C
C        IPVT    INTEGER(N)
C                AN INTEGER VECTOR OF PIVOT INDICES.
C
C        INFO    INTEGER
C                = 0  NORMAL VALUE.
C                = K  IF  U(K,K) .EQ. 0.0 .  THIS IS NOT AN ERROR
C                     CONDITION FOR THIS SUBROUTINE, BUT IT DOES
C                     INDICATE THAT DGESL OR DGEDI WILL DIVIDE BY ZERO
C                     IF CALLED.  USE  RCOND  IN DGECO FOR A RELIABLE
C                     INDICATION OF SINGULARITY.
C
C     LINPACK. THIS VERSION DATED 08/14/78 .
C     CLEVE MOLER, UNIVERSITY OF NEW MEXICO, ARGONNE NATIONAL LAB.
C
C     SUBROUTINES AND FUNCTIONS
C
C     BLAS DAXPY,DSCAL,IDAMAX
C
C     INTERNAL VARIABLES
C
      DOUBLE PRECISION T
      INTEGER IDAMAX,J,K,KP1,L,NM1
C
C
C     GAUSSIAN ELIMINATION WITH PARTIAL PIVOTING
C
      INFO = 0
      NM1 = N - 1
      IF (NM1 .LT. 1) GO TO 70
      DO 60 K = 1, NM1
         KP1 = K + 1
C
C        FIND L = PIVOT INDEX
C
         L = IDAMAX(N-K+1,A(K,K),1) + K - 1
         IPVT(K) = L
C
C        ZERO PIVOT IMPLIES THIS COLUMN ALREADY TRIANGULARIZED
C
         IF (A(L,K) .EQ. 0.0D0) GO TO 40
C
C           INTERCHANGE IF NECESSARY
C
            IF (L .EQ. K) GO TO 10
               T = A(L,K)
               A(L,K) = A(K,K)
               A(K,K) = T
   10       CONTINUE
C
C           COMPUTE MULTIPLIERS
C
            T = -1.0D0/A(K,K)
            CALL DSCAL(N-K,T,A(K+1,K),1)
C
C           ROW ELIMINATION WITH COLUMN INDEXING
C
            DO 30 J = KP1, N
               T = A(L,J)
               IF (L .EQ. K) GO TO 20
                  A(L,J) = A(K,J)
                  A(K,J) = T
   20          CONTINUE
               CALL DAXPY(N-K,T,A(K+1,K),1,A(K+1,J),1)
   30       CONTINUE
         GO TO 50
   40    CONTINUE
            INFO = K
   50    CONTINUE
   60 CONTINUE
   70 CONTINUE
      IPVT(N) = N
      IF (A(N,N) .EQ. 0.0D0) INFO = N
      RETURN
      END

      SUBROUTINE DGRD(R,GRADD2,GRADD,HDEL2)
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
C
      COMMON CO(400000),IC(400000),MODE,NCENT,NMO,NPRIMS
      COMMON /DIST/ RMIN,RMAX,MINR
      COMMON /OFFSET/ ITYPE,ICENT,KATOM,IEORB,IE,IMO,ICHARG,IXC,IYC,IZC,
     +  IXX, IYY, IZZ,IXS,IYS,IZS,IRR,IR2,IP,IPSI,IGX,IGY,IGZ,ID2,
     + IGXX,IGXY,IGXZ,IGYY,IGYZ,IGZZ,IGXXX,IGXXY,IGXXZ,IGYYY,IGYYX,
     + IGYYZ,IGZZZ,IGZZX,IGZZY,IGXYZ,IGXXXX,IGXXXY,IGXXXZ,IGXXYY,
     + IGXXZZ,IGXXYZ,IGYYYY,IGYYYX,IGYYYZ,IGYYXZ,IGZZZZ,IGZZZX,
     + IGZZZY,IGZZYY,IGZZXY
C
      DIMENSION RS(3),GRADD2(3),R(3),HDEL2(3,3)
C
      RMIN = 1000.0D0
      RMAX =    0.0D0
C
      DO 10 I = 1,NCENT
        CO(IXX+I) = R(1)-CO(IXC+I)
        CO(IYY+I) = R(2)-CO(IYC+I)
        CO(IZZ+I) = R(3)-CO(IZC+I)
        CO(IR2+I) = CO(IXX+I)*CO(IXX+I) +
     +              CO(IYY+I)*CO(IYY+I) +
     +              CO(IZZ+I)*CO(IZZ+I)
        CO(IRR+I) = DSQRT(CO(IR2+I))
        IF (CO(IRR+I) .LT. RMIN) THEN
          RMIN = CO(IRR+I)
          MINR = I
        END IF
        IF (CO(IRR+I) .GT. RMAX) RMAX = CO(IRR+I)
   10 CONTINUE
C
      CALL DGAUS4
C
      DO 11 I = 1,3
        GRADD2(I) = 0.0D0
        DO 11 J = 1,3
          HDEL2(I,J) = 0.0D0
11    CONTINUE
C
C     COMPUTE -DEL2, GRAD -DEL2, AND THE HESSIAN OF -DEL2
C
      DO 40 I = 1,NMO
        PSI=CO(IPSI+I)
        COMM1=-2.0D0*CO(IP+I)
        COMM2=CO(IGXX+I)+CO(IGYY+I)+CO(IGZZ+I)
        COMM3=CO(IGXXX+I)+CO(IGYYX+I)+CO(IGZZX+I)
        COMM4=CO(IGXXY+I)+CO(IGYYY+I)+CO(IGZZY+I)
        COMM5=CO(IGXXZ+I)+CO(IGYYZ+I)+CO(IGZZZ+I)
        GRADD2(1) = GRADD2(1) + COMM1*(2.0D0*(CO(IGX+I)*CO(IGXX+I)+
     1  CO(IGY+I)*CO(IGXY+I)+CO(IGZ+I)*CO(IGXZ+I))+
     2  CO(IGX+I)*COMM2+PSI*COMM3)
        GRADD2(2)=GRADD2(2)+COMM1*(2.0D0*(CO(IGX+I)*CO(IGXY+I)+
     1  CO(IGY+I)*CO(IGYY+I)+CO(IGZ+I)*CO(IGYZ+I))+
     2  CO(IGY+I)*COMM2+PSI*COMM4)
        GRADD2(3)=GRADD2(3)+COMM1*(2.0D0*(CO(IGX+I)*CO(IGXZ+I)+
     1  CO(IGY+I)*CO(IGYZ+I)+CO(IGZ+I)*CO(IGZZ+I))+
     2  CO(IGZ+I)*COMM2+PSI*COMM5)
C
      HDEL2(1,1)=HDEL2(1,1)+COMM1*(2.0D0*(CO(IGXX+I)*CO(IGXX+I)+
     1 CO(IGXY+I)*CO(IGXY+I)+CO(IGXZ+I)*CO(IGXZ+I)+
     2 CO(IGX+I)*CO(IGXXX+I)+CO(IGY+I)*CO(IGXXY+I)+
     3 CO(IGZ+I)*CO(IGXXZ+I)+CO(IGX+I)*COMM3)+CO(IGXX+I)*COMM2+
     4 PSI*(CO(IGXXXX+I)+CO(IGXXYY+I)+CO(IGXXZZ+I)))
      HDEL2(1,2)=HDEL2(1,2)+COMM1*(2.0D0*(CO(IGXY+I)*
     1 (CO(IGXX+I)+CO(IGYY+I))+CO(IGXZ+I)*CO(IGYZ+I)+
     2 CO(IGX+I)*CO(IGXXY+I)+CO(IGY+I)*CO(IGYYX+I)+
     3 CO(IGZ+I)*CO(IGXYZ+I))+CO(IGXY+I)*COMM2+
     4 CO(IGX+I)*COMM4+CO(IGY+I)*COMM3+
     5 PSI*(CO(IGXXXY+I)+CO(IGYYYX+I)+CO(IGZZXY+I)))
      HDEL2(1,3)=HDEL2(1,3)+COMM1*(2.0D0*(CO(IGXZ+I)*
     1 (CO(IGXX+I)+CO(IGZZ+I))+CO(IGXY+I)*CO(IGYZ+I)+
     2 CO(IGX+I)*CO(IGXXZ+I)+CO(IGY+I)*CO(IGXYZ+I)+
     3 CO(IGZ+I)*CO(IGZZX+I))+CO(IGXZ+I)*COMM2+
     4 CO(IGX+I)*COMM5+CO(IGZ+I)*COMM3+
     5 PSI*(CO(IGXXXZ+I)+CO(IGYYXZ+I)+CO(IGZZZX+I)))
      HDEL2(2,2)=HDEL2(2,2)+COMM1*(2.0D0*(CO(IGYY+I)*CO(IGYY+I)+
     1 CO(IGXY+I)*CO(IGXY+I)+CO(IGYZ+I)*CO(IGYZ+I)+
     2 CO(IGX+I)*CO(IGYYX+I)+CO(IGY+I)*CO(IGYYY+I)+
     3 CO(IGZ+I)*CO(IGYYZ+I)+CO(IGY+I)*COMM4)+CO(IGYY+I)*COMM2+
     4 PSI*(CO(IGYYYY+I)+CO(IGXXYY+I)+CO(IGZZYY+I)))
      HDEL2(2,3)=HDEL2(2,3)+COMM1*(2.0D0*(CO(IGYZ+I)*
     1 (CO(IGYY+I)+CO(IGZZ+I))+CO(IGXY+I)*CO(IGXZ+I)+
     2 CO(IGX+I)*CO(IGXYZ+I)+CO(IGY+I)*CO(IGYYZ+I)+
     3 CO(IGZ+I)*CO(IGZZY+I))+CO(IGYZ+I)*COMM2+
     4 CO(IGY+I)*COMM5+CO(IGZ+I)*COMM4+
     5 PSI*(CO(IGXXYZ+I)+CO(IGYYYZ+I)+CO(IGZZZY+I)))
      HDEL2(3,3)=HDEL2(3,3)+COMM1*(2.0D0*(CO(IGZZ+I)*CO(IGZZ+I)+
     1 CO(IGXZ+I)*CO(IGXZ+I)+CO(IGYZ+I)*CO(IGYZ+I)+
     2 CO(IGX+I)*CO(IGZZX+I)+CO(IGY+I)*CO(IGZZY+I)+
     3 CO(IGZ+I)*CO(IGZZZ+I)+CO(IGZ+I)*COMM5)+CO(IGZZ+I)*COMM2+
     4 PSI*(CO(IGZZZZ+I)+CO(IGXXZZ+I)+CO(IGZZYY+I)))
40    CONTINUE
Cr
      HDEL2(2,1)=HDEL2(1,2)
      HDEL2(3,1)=HDEL2(1,3)
      HDEL2(3,2)=HDEL2(2,3)
      GRADD=0.0
      DO 5 I=1,3
5     GRADD=GRADD+GRADD2(I)*GRADD2(I)
      GRADD=DSQRT(GRADD)
      RETURN
      END
      SUBROUTINE  DSCAL(N,DA,DX,INCX)
C
C     SCALES A VECTOR BY A CONSTANT.
C     USES UNROLLED LOOPS FOR INCREMENT EQUAL TO ONE.
C     JACK DONGARRA, LINPACK, 3/11/78.
C
      DOUBLE PRECISION DA,DX(1)
      INTEGER I,INCX,M,MP1,N,NINCX
C
      IF(N.LE.0)RETURN
      IF(INCX.EQ.1)GO TO 20
C
C        CODE FOR INCREMENT NOT EQUAL TO 1
C
      NINCX = N*INCX
      DO 10 I = 1,NINCX,INCX
        DX(I) = DA*DX(I)
   10 CONTINUE
      RETURN
C
C        CODE FOR INCREMENT EQUAL TO 1
C
C
C        CLEAN-UP LOOP
C
   20 M = MOD(N,5)
      IF( M .EQ. 0 ) GO TO 40
      DO 30 I = 1,M
        DX(I) = DA*DX(I)
   30 CONTINUE
      IF( N .LT. 5 ) RETURN
   40 MP1 = M + 1
      DO 50 I = MP1,N,5
        DX(I) = DA*DX(I)
        DX(I + 1) = DA*DX(I + 1)
        DX(I + 2) = DA*DX(I + 2)
        DX(I + 3) = DA*DX(I + 3)
        DX(I + 4) = DA*DX(I + 4)
   50 CONTINUE
      RETURN
      END
      SUBROUTINE  DSWAP (N,DX,INCX,DY,INCY)
C
C     INTERCHANGES TWO VECTORS.
C     USES UNROLLED LOOPS FOR INCREMENTS EQUAL ONE.
C     JACK DONGARRA, LINPACK, 3/11/78.
C
      DOUBLE PRECISION DX(1),DY(1),DTEMP
      INTEGER I,INCX,INCY,IX,IY,M,MP1,N
C
      IF(N.LE.0)RETURN
      IF(INCX.EQ.1.AND.INCY.EQ.1)GO TO 20
C
C       CODE FOR UNEQUAL INCREMENTS OR EQUAL INCREMENTS NOT EQUAL
C         TO 1
C
      IX = 1
      IY = 1
      IF(INCX.LT.0)IX = (-N+1)*INCX + 1
      IF(INCY.LT.0)IY = (-N+1)*INCY + 1
      DO 10 I = 1,N
        DTEMP = DX(IX)
        DX(IX) = DY(IY)
        DY(IY) = DTEMP
        IX = IX + INCX
        IY = IY + INCY
   10 CONTINUE
      RETURN
C
C       CODE FOR BOTH INCREMENTS EQUAL TO 1
C
C
C       CLEAN-UP LOOP
C
   20 M = MOD(N,3)
      IF( M .EQ. 0 ) GO TO 40
      DO 30 I = 1,M
        DTEMP = DX(I)
        DX(I) = DY(I)
        DY(I) = DTEMP
   30 CONTINUE
      IF( N .LT. 3 ) RETURN
   40 MP1 = M + 1
      DO 50 I = MP1,N,3
        DTEMP = DX(I)
        DX(I) = DY(I)
        DY(I) = DTEMP
        DTEMP = DX(I + 1)
        DX(I + 1) = DY(I + 1)
        DY(I + 1) = DTEMP
        DTEMP = DX(I + 2)
        DX(I + 2) = DY(I + 2)
        DY(I + 2) = DTEMP
   50 CONTINUE
      RETURN
      END

      SUBROUTINE FIGNEWTON(R,EPS,IFAIL)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION W(3),R1(3),IW(3),XX(2),H(3,3),R(3)
C
      COMMON /UNITS/ INPT, IOUT, IWFN
C
      DAMP = 1.0
      CALL DGRD(R,W,GRAD,H)
      IS = 0
C
C    BEGIN NEWTON RAPHSON SEARCH
C
99    DO 100 I = 1,35
        IS = IS + 1
        CALL DGECO(H,3,3,IW,ER,R1)
        CALL DGEDI(H,3,3,IW,XX,R1,1)
        DO 110 J = 1,3
          R1(J) = 0.D0
          DO 110 K = 1,3
            R1(J) = R1(J) + H(J,K)*W(K)
            DJ = DABS(R1(J))
            IF (DJ .GT. DAMP) R1(J) = DAMP*R1(J)/DJ
110     CONTINUE
C
C    GENERATE SHIFT VECTOR
C
        DO 120 J = 1,3
          R(J) = R(J) - R1(J)
120     CONTINUE
C
        CALL DGRD(R,W,GRAD,H)
        IF (GRAD .LE. EPS) THEN
          RETURN
        END IF
100   CONTINUE
C
C
      IFAIL=1
C
      RETURN
      END
      SUBROUTINE GAUS4
C+++
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C+++
C
C    FOR GAUSSIAN WAVEFUNCTIONS ONLY.  CALCULATES AT A GIVEN POINT
C    THE VALUE OF EACH MOLECULAR ORBITAL AND THE MO GRADIENT VECTOR
C    COMPONENTS.
C
      COMMON /OFFSET/ ITYPE,ICENT,KATOM,IEORB,IE,IMO,ICHARG,IXC,IYC,IZC,
     1  IXX, IYY, IZZ,IXS,IYS,IZS,IRR,IR2,IP,IPSI,IGX,IGY,IGZ,ID2,
     +IGXX,IGXY,IGXZ,IGYY,IGYZ,IGZZ
      COMMON CO(400000),IC(400000),MODE,NCENT,NMO,NPRIMS
      COMMON /EVALS/ NGAU3,  NSLAT3,  NGAU4,  NSLAT4
C     EQUIVALENCE (IC(1),CO(1))
      NGAU4=NGAU4+1
C
      DO 310 J=1,NMO
      CO(IPSI+J)=0.0
      CO(IGX+J)=0.0
      CO(IGY+J)=0.0
      CO(IGZ+J)=0.0
      CO(IGXX+J)=0.0
      CO(IGXY+J)=0.0
      CO(IGXZ+J)=0.0
      CO(IGYY+J)=0.0
      CO(IGYZ+J)=0.0
      CO(IGZZ+J)=0.
  310 CONTINUE
      DO 360 I=1,NPRIMS
      K=IC(ICENT+I)
      EE=CO(IE+I)*2.0
      X=CO(IXX+K)
      Y=CO(IYY+K)
      Z=CO(IZZ+K)
      CCOO=-CO(IE+I)*CO(IR2+K)
      EXPON=0.D0
      IF(CCOO.GT.-170.D0) EXPON=DEXP(CCOO)
      XX=X*X
      XY=X*Y
      XZ=X*Z
      YY=Y*Y
      YZ=Y*Z
      ZZ=Z*Z
      EXPEE=EXPON*EE
      IF (EXPON.LT.1.D-25) EXPON = 0.D0
      IF (EXPEE.LT.1.D-25) EXPEE = 0.D0
      GO TO (361,362,363,364,365,366,367,368,369,370) IC(ITYPE+I)
C
C    S
C
  361 CONTINUE
      BF=EXPON
      GX=-EXPEE*X
      GY=-EXPEE*Y
      GZ=-EXPEE*Z
      GXX=-GX*X*EE-EXPEE
      GXY=-GX*EE*Y
      GXZ=-GX*EE*Z
      GYY=-GY*Y*EE-EXPEE
      GYZ=-GY*EE*Z
      GZZ=-GZ*Z*EE-EXPEE
      GO TO 340
C
C    X
C
  362 CONTINUE
      BF=EXPON*X
      Q2=-EXPEE*X
      GX=EXPON*(1.0-EE*XX)
       GY=Q2*Y
      GZ=Q2*Z
      Q2=EE*X
      Q1=Q2*X
      GXX=EXPEE*X*(Q1-3.)
      GXY=EXPEE*Y*(Q1-1.)
      GXZ=EXPEE*Z*(Q1-1.)
      GYY=EXPEE*(Q2*YY-X)
      GYZ=EXPEE*Q2*YZ
      GZZ=EXPEE*(Q2*ZZ-X)
      GO TO 340
C
C    Y
C
  363 CONTINUE
      BF=EXPON*Y
      Q2=-EXPEE*Y
      GX=Q2*X
      GY=EXPON*(1.0-EE*YY)
      GZ=Q2*Z
      Q2=EE*Y
      Q1=Q2*Y
      GXX=EXPEE*(Q2*XX-Y)
      GXY=EXPEE*X*(Q1-1.)
      GXZ=EXPEE*Q2*XZ
      GYY=EXPEE*Y*(Q1-3.)
      GYZ=EXPEE*Z*(Q1-1.)
      GZZ=EXPEE*(Q2*ZZ-Y)
      GO TO 340
C
C    Z
C
  364 CONTINUE
      BF=EXPON*Z
      Q2=-EXPEE*Z
      GX=Q2*X
      GY=Q2*Y
      GZ=EXPON*(1.0-EE*ZZ)
      Q2=EE*Z
      Q1=Q2*Z
      GXX=EXPEE*(Q2*XX-Z)
      GXY=EXPEE*Q2*XY
      GXZ=EXPEE*X*(Q1-1.)
      GYY=EXPEE*(Q2*YY-Z)
      GYZ=EXPEE*Y*(Q1-1.)
      GZZ=EXPEE*Z*(Q1-3.)
      GO TO 340
C
C    XX
C
  365 CONTINUE
      BF=EXPON*XX
      Q2=-BF*EE
      GX=   X*(Q2+2.*EXPON)
      GY=   Y*Q2
      GZ=   Z*Q2
      Q1=EE*XX
      GXX=(2.+(Q1-5.)*Q1)*EXPON
      GXY=EXPEE*XY*(Q1-2.)
      GXZ=EXPEE*XZ*(Q1-2.)
      GYY=EXPON*Q1*(EE*YY-1.)
      GYZ=EXPEE*Q1*YZ
      GZZ=EXPON*Q1*(EE*ZZ-1.)
      GO TO 340
C
C    YY
C
  366 CONTINUE
      BF=EXPON*YY
      Q2=-BF*EE
      GX=   X*Q2
      GY=   Y*(Q2+2.*EXPON)
      GZ=   Z*Q2
      Q1=EE*YY
      GXX=EXPON*Q1*(EE*XX-1.)
      GXY=EXPEE*XY*(Q1-2.)
      GXZ=EXPEE*XZ*Q1
      GYY=EXPON*(2.+(Q1-5.)*Q1)
      GYZ=EXPEE*YZ*(Q1-2.)
      GZZ=EXPON*Q1*(EE*ZZ-1.)
      GO TO 340
C
C    ZZ
C
  367 CONTINUE
      BF=EXPON*ZZ
      Q2=-BF*EE
      GX=   X*Q2
      GY=   Y*Q2
      GZ=   Z*(Q2+2.*EXPON)
      Q1=EE*ZZ
      GXX=EXPON*Q1*(EE*XX-1.)
      GXY=EXPEE*Q1*XY
      GXZ=EXPEE*XZ*(Q1-2.)
      GYY=EXPON*Q1*(EE*YY-1.)
      GYZ=EXPEE*YZ*(Q1-2.)
      GZZ=EXPON*(2.+(Q1-5.)*Q1)
      GO TO 340
C
C    XY
C
  368 Q1=   EXPON*X
      BF=Q1*Y
      Q3=-BF*EE
      GX=   Q3*X + EXPON*Y
      GY=   Q3*Y + Q1
      GZ=   Q3*Z
      Q1=EE*XX
      Q2=EE*YY
      GXX=EXPEE*XY*(Q1-3.)
      GXY=(Q1-1.)*(Q2-1.)*EXPON
      GXZ=EXPEE*YZ*(Q1-1.)
      GYY=EXPEE*XY*(Q2-3.)
      GYZ=EXPEE*XZ*(Q2-1.)
      GZZ=EXPEE*XY*(EE*ZZ-1.)
      GO TO 340
C
C    XZ
C
  369 Q1=   EXPON*Z
      BF=Q1*X
      Q3=-BF*EE
      GX=   Q3*X + Q1
      GY=   Q3*Y
      GZ=   Q3*Z + EXPON*X
      Q1=EE*XX
      Q2=EE*ZZ
      GXX=EXPEE*XZ*(Q1-3.)
      GXY=EXPEE*YZ*(Q1-1.)
      GXZ=EXPON*(Q1-1.)*(Q2-1.)
      GYY=EXPEE*XZ*(EE*YY-1.)
      GYZ=EXPEE*XY*(Q2-1.)
      GZZ=EXPEE*XZ*(Q2-3.)
      GO TO 340
C
C    YZ
C
  370 Q1=   EXPON*Y
      BF=Q1*Z
      Q3=-BF*EE
      GX=   Q3*X
      GY=   Q3*Y + EXPON*Z
      GZ=   Q3*Z + Q1
      Q1=EE*YY
      Q2=EE*ZZ
      GXX=EXPEE*YZ*(EE*XX-1.)
      GXY=EXPEE*XZ*(Q1-1.)
      GXZ=EXPEE*XY*(Q2-1.)
      GYY=EXPEE*YZ*(Q1-3.)
      GYZ=(Q1-1.)*(Q2-1.)*EXPON
      GZZ=EXPEE*YZ*(Q2-3.)
  340 CONTINUE
C
C    CALCULATE DENSITY AND GRADIENT COMPONENTS FOR EACH MO.
C
      DO 360 J=1,NMO
      CIJ=CO(IMO+NPRIMS*(J-1)+I)
      CO(IPSI+J)=CO(IPSI+J)+CIJ*BF
      CO(IGX+J)=CO(IGX+J)+CIJ*GX
      CO(IGY+J)=CO(IGY+J)+CIJ*GY
      CO(IGZ+J)=CO(IGZ+J)+CIJ*GZ
      CO(IGXX+J)=CO(IGXX+J)+CIJ*GXX
      CO(IGXY+J)=CO(IGXY+J)+CIJ*GXY
      CO(IGXZ+J)=CO(IGXZ+J)+CIJ*GXZ
      CO(IGYY+J)=CO(IGYY+J)+CIJ*GYY
      CO(IGYZ+J)=CO(IGYZ+J)+CIJ*GYZ
      CO(IGZZ+J)=CO(IGZZ+J)+CIJ*GZZ
  360 CONTINUE
      RETURN
      END
      SUBROUTINE GEOM (N,X0,Y0,Z0,RN,AYZ,AXZ,AXY)
C
C  DETERMINES THE LENGTH OF THE VECTOR FROM NUCLEUS N TO THE
C  CRITICAL POINT (X0,Y0,Z0) AND THE ANGLES BETWEEN THIS VECTOR AND ITS
C  PROJECTIONS ONTO THE YZ, XZ, AND XY PLANES OF THE MCS.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      COMMON CO(400000),IC(400000),MODE,NCENT,NMO,NPRIMS
C
      COMMON /OFFSET/ ITYPE,ICENT,KATOM,IEORB,IE,IMO,ICHARG,IXC,IYC,IZC,
     + IXX,IYY,IZZ,IXS,IYS,IZS,IRR,IR2,IP,IPSI,IGX,IGY,IGZ,ID2,IGXX,
     + IGXY,IGXZ,IGYY,IGYZ,IGZZ
C
      COMMON /STUFF/ PI,RADIAN,DEGREE
C
      XN2 = (X0-CO(IXC+N))*(X0-CO(IXC+N))
      YN2 = (Y0-CO(IYC+N))*(Y0-CO(IYC+N))
      ZN2 = (Z0-CO(IZC+N))*(Z0-CO(IZC+N))
      RN = DSQRT(XN2+YN2+ZN2)
      IF (RN.EQ.0.0) THEN
        AXY = 0.0D0
        AXZ = 0.0D0
        AYZ = 0.0D0
        RETURN
      ELSE
        RYZ = DSQRT(YN2+ZN2)
        RXZ = DSQRT(XN2+ZN2)
        RXY = DSQRT(XN2+YN2)
        AYZ = DACOS(RYZ/RN)*DEGREE
        AXZ = DACOS(RXZ/RN)*DEGREE
        AXY = DACOS(RXY/RN)*DEGREE
        RETURN
      ENDIF
      END

      SUBROUTINE GRD(R,W,GRAD,H)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
      DIMENSION W(3),R(3),H(3,3),XYZ(3)
C
      COMMON CO(400000),IC(400000),MODE,NCENT,NMO,NPRIMS
C
      COMMON /DATA/ MODES,MODEG
C
      COMMON /DIST/ RMIN,RMAX,MINR
C
      COMMON /OFFSET/ ITYPE,ICENT,KATOM,IEORB,IE,IMO,ICHARG,IXC,IYC,IZC,
     1  IXX, IYY, IZZ,IXS,IYS,IZS,IRR,IR2,IP,IPSI,IGX,IGY,IGZ,ID2,
     +IGXX,IGXY,IGXZ,IGYY,IGYZ,IGZZ,IGXXX,IGXXY,IGXXZ,IGYYY,IGYYX,
     +IGYYZ,IGZZZ,IGZZX,IGZZY,IGXYZ,IGXXXX,IGXXXY,IGXXXZ,IGXXYY,
     +IGXXZZ,IGXXYZ,IGYYYY,IGYYYX,IGYYYZ,IGYYXZ,IGZZZZ,IGZZZX,
     +IGZZZY,IGZZYY,IGZZXY
C
      COMMON /STRESS/ SG(3,3), GRADSG(3)
C
      RMIN = 1000.D0
      RMAX = 0.0D0
C
      DO 100 I=1,NCENT
        CO(IXX+I) = R(1)-CO(IXC+I)
        CO(IYY+I) = R(2)-CO(IYC+I)
        CO(IZZ+I) = R(3)-CO(IZC+I)
        CO(IR2+I) = CO(IXX+I)*CO(IXX+I) +
     1              CO(IYY+I)*CO(IYY+I) +
     2              CO(IZZ+I)*CO(IZZ+I)
        CO(IRR+I) = DSQRT(CO(IR2+I))
        IF(CO(IRR+I) .LT. RMIN) THEN
          RMIN = CO(IRR+I)
          MINR = I
        ELSE IF (CO(IRR+I) .GT. RMAX) THEN
          RMAX = CO(IRR+I)
        END IF
100   CONTINUE
C
      CALL GAUS4
C
      DO 110 I = 1,3
        W(I) = 0.0D0
        DO 110 J = I,3
          H(I,J) = 0.0D0
          SG(I,J) = 0.0D0
110   CONTINUE
C
      DO 120 I = 1,NMO
        P0 = CO(IP+I)
        P1 = P0*CO(IPSI+I)
        W(1) = W(1) + P1*CO(IGX+I)
        W(2) = W(2) + P1*CO(IGY+I)
        W(3) = W(3) + P1*CO(IGZ+I)
        H(1,1) = H(1,1) + P0*CO(IGX+I)**2
        H(1,2) = H(1,2) + P0*CO(IGX+I)*CO(IGY+I)
        H(1,3) = H(1,3) + P0*CO(IGX+I)*CO(IGZ+I)
        H(2,2) = H(2,2) + P0*CO(IGY+I)**2
        H(2,3) = H(2,3) + P0*CO(IGY+I)*CO(IGZ+I)
        H(3,3) = H(3,3) + P0*CO(IGZ+I)**2
        SG(1,1) = SG(1,1) + P1*CO(IGXX+I)
        SG(1,2) = SG(1,2) + P1*CO(IGXY+I)
        SG(1,3) = SG(1,3) + P1*CO(IGXZ+I)
        SG(2,2) = SG(2,2) + P1*CO(IGYY+I)
        SG(2,3) = SG(2,3) + P1*CO(IGYZ+I)
        SG(3,3) = SG(3,3) + P1*CO(IGZZ+I)
120   CONTINUE
C
      GRAD=0.0D0
C
      DO 130 I = 1,3
      W(I) = W(I)*2.0D0
        GRAD = GRAD+W(I)*W(I)
        DO 130 J = I,3
          DM = H(I,J)
          H(I,J) = (DM+SG(I,J))*2.0D0
          SG(I,J) = (-DM+SG(I,J))/2.0D0
          H(J,I) = H(I,J)
          SG(J,I) = SG(I,J)
130   CONTINUE
C
      GRAD = DSQRT(GRAD)
C
      RETURN
      END
      INTEGER FUNCTION IDAMAX(N,DX,INCX)
      DOUBLE PRECISION DX(1),DMAX
      INTEGER I,INCX,IX,N
      IDAMAX = 0
      IF( N .LT. 1 ) RETURN
      IDAMAX = 1
      IF(N.EQ.1)RETURN
      IF(INCX.EQ.1)GO TO 20
      IX = 1
      DMAX = DABS(DX(1))
      IX = IX + INCX
      DO 10 I = 2,N
         IF(DABS(DX(IX)).LE.DMAX) GO TO 5
         IDAMAX = I
         DMAX = DABS(DX(IX))
    5    IX = IX + INCX
   10 CONTINUE
      RETURN
   20 DMAX = DABS(DX(1))
      DO 30 I = 2,N
         IF(DABS(DX(I)).LE.DMAX) GO TO 30
         IDAMAX = I
         DMAX = DABS(DX(I))
   30 CONTINUE
      RETURN
      END
      SUBROUTINE MAKNAME(I,STRING,L,EXT)
      CHARACTER*(*) STRING,EXT
      INTEGER I,J
      CALL GETARG(I,STRING)
      J = LEN(STRING)
      DO 10 N = 1,J
        IF(STRING(N:N) .EQ. ' ') THEN
          L = N - 1
          STRING = STRING(1:L)//EXT
          RETURN
        ENDIF
 10    CONTINUE
      STOP ' FAILED TO MAKE A FILE NAME '
      RETURN
      END
C SKK ================================================================== SKK
C
        FUNCTION        NUMBER  (LINE, LPST, NUM, DEC)
C
C CONVERTS A CHARACTER STRING OF NUMBERS INTO ACTUAL NUMBERS EITHER
C INTEGERS OR DECIMAL MAY BE READ.
C NUMBER = 1 IF ALL THE REMAINING CHARACTERS ARE BLANK
C        = 2 IF CHARACTERS ARE NOT RECOGNISED AS A NUMBER, LPST IS RESET
C SKK ================================================================== SKK

        DOUBLE PRECISION DEC, TEN
        CHARACTER*(*)   LINE
        CHARACTER       BLANK, COMMA, DOT, MINUS, L
        CHARACTER       CTEN(0:9)
        DATA    CTEN    /'0','1','2','3','4','5','6','7','8','9'/
        PARAMETER       (BLANK = ' ', COMMA = ',')
        PARAMETER       (DOT   = '.', MINUS = '-')
        INTEGER         ITEN
        PARAMETER       (ITEN = 10, TEN = 10.0D0)
        NUM     = 0
        DEC     = 0.0D0
        NP      = 0
        ND      = 0
        MS      = 0
        NUMBER  = 0
        LPEND   = LEN (LINE)
5       IF (LINE(LPST:LPST) .EQ. BLANK) THEN
                LPST    = LPST + 1
                IF (LPST .GT. LPEND) THEN
                        NUMBER  = 1
                        RETURN
                END IF
                GOTO 5
        END IF
        LBEFOR  = LPST

        DO 1 I  = LBEFOR, LPEND
        LPST    = I
        L       = LINE(I:I)
        IF (L .EQ. BLANK .OR. L .EQ. COMMA) THEN
                GOTO 2
        ELSE IF (L .EQ. MINUS) THEN
                MS      = 1
                GOTO 1
        ELSE IF (L .EQ. DOT) THEN
                NP      = 1
                GOTO 1
        END IF
        DO 3 J  = 0, 9
        IF (L .EQ. CTEN(J)) THEN
                N       = J
                GOTO 4
        END IF
3       CONTINUE
        NUMBER  = 2
        LPST    = LBEFOR
        RETURN

4       IF (NP .EQ. 1) THEN
                ND      = ND + 1
                DEC     = DEC + DFLOAT(N)/TEN**ND
        ELSE
                NUM     = NUM*ITEN + N
        END IF
1       CONTINUE

2       DEC     = DFLOAT(NUM) + DEC
        IF (MS .EQ. 0) RETURN
        DEC     = -DEC
        NUM     = -NUM
        RETURN
        END
C
C  FOR UNIX IMPLEMENTATION
C
C     SUBROUTINE MAKNAME(I,STRING,L,EXT)
C     CHARACTER*(*) STRING,EXT
C     INTEGER I,J
C     CALL GETARG(I,STRING)
C     J = LEN(STRING)
C     DO 10 N = 1,J
C       IF(STRING(N:N) .EQ. ' ') THEN
C         L = N - 1
C         STRING = STRING(1:L)//EXT
C         RETURN
C       ENDIF
C10    CONTINUE
C     STOP ' FAILED TO MAKE A FILE NAME '
C     RETURN
C     END

      SUBROUTINE RDWFN
C+++
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C+++
C
C  READS WAVEFUNCTION.  INPUT (PREPARED BY PROGRAM PSI) CONSISTS OF
C     LABEL  - A LABEL FOR THE WAVEFUNCTION
C     MODE   - WAVEFUNCTION TYPE (SLATER OR GAUSSIAN)
C     NMO    - NO. OF MOLECULAR ORBITALS
C     NPRIMS -NO. OF (PRIMITIVE) BASIS FUNCTIONS
C     NCENT  - NO. OF NUCLEI
C
C  THEN FOR EACH NUCLEUS,
C     KATOM      - NAME
C     X/Y/ZCENTR - COORDINATES
C     CHARGE     - ATOMIC NUMBER
C
C  AND FOR EACH BASIS FUNCTION
C     ICENT  - THE NO. OF THE NUCLEUS ON WHICH IT IS CENTERED
C     ITYPE  - FUNCTION TYPE (SEE ARRAYS LABELS AND LABELG)
C     E      - EXPONENT
C
C  AND FOR EACH MOLECULAR ORBITAL,
C     MOLAB - A LABEL
C     P     - OCCUPATION NUMBER
C     EORB  - ORBITAL ENERGY
C     CO    - COEFFICIENTS OF PRIMITIVE BASIS FUNCTIONS.  THESE
C             INCLUDE ALL NORMALIZATION AND CONTRACTION COEFFICIENTS.
C
      CHARACTER*80 WFNTTL,JOBTTL
      CHARACTER*8 ATNAM
      DIMENSION LABELS(31),LABELG(20)
C
      COMMON /UNITS/  INPT,IOUT,IWFN,IDBG
C
      COMMON /C10/ GC
C
      COMMON /STRING/ WFNTTL,JOBTTL,ATNAM(60),NAT
C
      COMMON /C29/ THRESH1,THRESH2,GAMMA,TOTE
C
      DIMENSION MOLAB(2)
C
      COMMON /OFFSET/ ITYPE,ICENT,KATOM,IEORB,IE,IMO,ICHARG,IXC,IYC,IZC,
     + IXX, IYY, IZZ,IXS,IYS,IZS,IRR,IR2,IP,IPSI,IGX,IGY,IGZ,ID2,
     +IGXX,IGXY,IGXZ,IGYY,IGYZ,IGZZ,IGXXX,IGXXY,IGXXZ,IGYYY,IGYYX,
     +IGYYZ,IGZZZ,IGZZX,IGZZY,IGXYZ,IGXXXX,IGXXXY,IGXXXZ,IGXXYY,
     +IGXXZZ,IGXXYZ,IGYYYY,IGYYYX,IGYYYZ,IGYYXZ,IGZZZZ,IGZZZX,
     +IGZZZY,IGZZYY,IGZZXY
      COMMON CO(400000),IC(400000),MODE,NCENT,NMO,NPRIMS
C
      REAL*8  LABELS
C                             TO HOLD 8 CHARACTERS PER PARCEL
C
      DATA MODEG,  MODES / 4HSIAN, 4HER   /
C
      DATA LABELS /2H1S,2H2S,4H2P X,4H2P Y,4H2P Z,2H3S,4H3P X,4H3P Y,
     14H3P Z,5H3D Z2,8H3D X2-Y2,5H3D XY,5H3D XZ,5H3D YZ,4H4P X,4H4P Y,
     24H4P Z,5H4D Z2,5H4D XY,5H4D XZ,5H4D YZ,5H4F Z3,6H4F Z2X,6H4F Z2Y,
     36H4F Z2Z,2H4S,8H4D X2-Y2,2H5S,4H5P X,4H5P Y,4H5P Z/
C
C
      DATA LABELG /1HS,1HX,1HY,1HZ,2HXX,2HYY,2HZZ,2HXY,2HXZ,2HYZ,3HXXX,
     13HYYY,3HZZZ,3HXXY,3HXXZ,3HXYY,3HYYZ,3HXZZ,3HYZZ,3HXYZ/
C
      DATA JP/1/,JG/1/,JD/1/,JHESS/1/,JPL/0/
C
      DATA ENDATA /8HEND DATA/
C
      READ(IWFN,101) WFNTTL
      READ(IWFN,102) MODE,NMO,NPRIMS,NCENT
      write(Iout,102) MODE,NMO,NPRIMS,NCENT
C
      CONTINUE
      GCO=0.
      GC=0.
C
C   THE QUANTITIES BELOW ARE OFFSETS IN VECTORS CO AND IO
C
      IXS=0
      IYS=NCENT*JPL
      IZS=IYS+NCENT*JPL
C                             FUNCTION TYPES...
      ITYPE=IZS+NCENT*JPL
C                             FUNCTION CENTRES
      ICENT=ITYPE+NPRIMS
C                             CENTRE NUMBER OF EACH FUNCTION
      KATOM=ICENT+NPRIMS
C                             ORBITAL ENERGIES OF EACH M.O.
      IEORB=KATOM+NCENT
C                             EXPONENTS OF THE FUNCTIONS
      IE=IEORB+NMO
C                             NUCLEAR CHARGE OF EACH CENTRE
      ICHARG=IE+NPRIMS
C
C                             XYZ COORDS OF THE CENTRES IN
C                             ORIGINAL CARTESIAN SYSTEM
      IXC=ICHARG+NCENT
      IYC=IXC+NCENT
      IZC=IYC+NCENT
C
C                             XYZ COORDS OF CENTRES RELATIVE TO A
C                             CURRENT TEST POINT IN THE INTEGRATION
      IXX=IZC+NCENT
      IYY=IXX+NCENT
      IZZ=IYY+NCENT
C
C                             SQUARE OF DISTANCE FROM CENTRES TO
C                             CURRENT POINT
      IRR=IZZ+NCENT
C                             DISTANCE FROM CENTRES TO CURRENT POINT
      IR2=IRR+NCENT
C                             NUMBER OF ELECTRONS IN THE M.O.
      IP=IR2+NCENT
C                             PSI VALUES FOR EACH M.O.
      IPSI=IP+NMO
C
C                              GRAD VALUES (XYZ) FOR EACH M.O.
      IGX=IPSI+NMO*JP
      IGY=IGX+NMO*JG
      IGZ=IGY+NMO*JG
C                             DEL2RHO FOR EACH M.O.
      ID2=IGZ+NMO*JG
C
C                             OFFSET FOR STORAGE OF M.O.S
      IMO=ID2+NMO*JD
C
C     STORAGE OF THE HESSIAN
C
      IGXX=IMO+NMO*NPRIMS
      IGXY=IGXX+NMO*JHESS
      IGXZ=IGXY+NMO*JHESS
      IGYY=IGXZ+NMO*JHESS
      IGYZ=IGYY+NMO*JHESS
      IGZZ=IGYZ+NMO*JHESS
C
C     THIRD PARTIAL DERIVATIVES FOR EACH M.O.
C
      IGXXX=IGZZ+NMO*JHESS
      IGXXY=IGXXX+NMO*JHESS
      IGXXZ=IGXXY+NMO*JHESS
      IGYYY=IGXXZ+NMO*JHESS
      IGYYX=IGYYY+NMO*JHESS
      IGYYZ=IGYYX+NMO*JHESS
      IGZZZ=IGYYZ+NMO*JHESS
      IGZZX=IGZZZ+NMO*JHESS
      IGZZY=IGZZX+NMO*JHESS
      IGXYZ=IGZZY+NMO*JHESS
C
C     FOURTH PARTIAL DERIVATIVES FOR EACH M.O.
C
      IGXXXX=IGXYZ+NMO*JHESS
      IGXXXY=IGXXXX+NMO*JHESS
      IGXXXZ=IGXXXY+NMO*JHESS
      IGXXYY=IGXXXZ+NMO*JHESS
      IGXXZZ=IGXXYY+NMO*JHESS
      IGXXYZ=IGXXZZ+NMO*JHESS
      IGYYYY=IGXXYZ+NMO*JHESS
      IGYYYX=IGYYYY+NMO*JHESS
      IGYYYZ=IGYYYX+NMO*JHESS
      IGYYXZ=IGYYYZ+NMO*JHESS
      IGZZZZ=IGYYXZ+NMO*JHESS
      IGZZZX=IGZZZZ+NMO*JHESS
      IGZZZY=IGZZZX+NMO*JHESS
      IGZZYY=IGZZZY+NMO*JHESS
      IGZZXY=IGZZYY+NMO*JHESS
C
      DO 2 I=1,NCENT
        READ(IWFN,103) ATNAM(I),J,CO(IXC+J),CO(IYC+J),CO(IZC+J),
     +  CO(ICHARG+J)
2     CONTINUE
      READ(IWFN,104) (IC(ICENT+I),I=1,NPRIMS)
      READ(IWFN,104) (IC(ITYPE+I),I=1,NPRIMS)
      READ(IWFN,105) (CO(IE+I),I=1,NPRIMS)
      DO 7 I=1,NMO
        READ(IWFN,106) (MOLAB(J),J=1,2),CO(IP+I),CO(IEORB+I)
        GCO=DMAX1(GCO,DABS(CO(IP+I)))
        K=NPRIMS*(I-1)+IMO
        READ(IWFN,107) (CO(K+J),J=1,NPRIMS)
        DO 7 J=1,NPRIMS
          GC=DMAX1(GC,DABS(CO(J+K)))
7     CONTINUE
      GC=DLOG(GC*GC*GCO*40000.)
      READ(IWFN,108) CHECK
C
C    READ IN TOTAL SCF ENERGY AND -V/T
C
      READ(IWFN,109) TOTE,GAMMA
      RETURN
C
101   FORMAT (A80)
c02   FORMAT (BZ,4X,A4,12X,3(I3,17X))
102   FORMAT (BZ,4X,A4,12X,I3,16X,I4,17x,I3)
103   FORMAT(A8,11X,I3,2X,3F12.8,10X,F5.1)
104   FORMAT (BZ,20X,20I3)
105   FORMAT (BZ,10X,5E14.7)
106   FORMAT(BZ,10X,2A5,15X,F12.8,15X,F12.8)
107   FORMAT (BZ,5E16.8)
108   FORMAT(BZ,A8)
109   FORMAT(17X,F20.12,18X,F13.8)
      END
      SUBROUTINE SLAT4
C+++
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C+++
C
C    FOR SLATER WAVEFUNCTIONS ONLY.  CALCULATES AT A GIVEN POINT THE
C    VALUE OF EACH MOLECULAR ORBITAL AND THE MO GRADIENT VECTOR
C    COMPONENTS.
C
C
      COMMON /OFFSET/ ITYPE,ICENT,KATOM,IEORB,IE,IMO,ICHARG,IXC,IYC,IZC,
     1  IXX, IYY, IZZ,IXS,IYS,IZS,IRR,IR2,IP,IPSI,IGX,IGY,IGZ,ID2,
     +IGXX,IGXY,IGXZ,IGYY,IGYZ,IGZZ
      COMMON CO(400000),IC(400000),MODE,NCENT,NMO,NPRIMS
C
      DO 10 J=1,NMO
      CO(IPSI+J)=0.0
      CO(IGX+J)=0.0
      CO(IGY+J)=0.0
      CO(IGZ+J)=0.0
      CO(IGXX+J)=0.0
      CO(IGXY+J)=0.0
      CO(IGXZ+J)=0.0
      CO(IGYY+J)=0.0
      CO(IGYZ+J)=0.0
      CO(IGZZ+J)=0.
   10 CONTINUE
      DO 60 I=1,NPRIMS
      K=IC(ICENT+I)
      X=CO(IXX+K)
      Y=CO(IYY+K)
      Z=CO(IZZ+K)
      R=CO(IRR+K)
      EI=CO(IE+I)
      ER=EI*R
C+++
      IF ( ER.GT.60.D0 ) THEN
      EXPON = 0.D0
      ELSE
      EXPON=DEXP(-ER)
      ENDIF
C+++
      EXPEE=EXPON*EI
      IF (EXPON.LT.1.D-25) EXPON = 0.D0
      IF (EXPEE.LT.1.D-25) EXPEE = 0.D0
      EE1=EXPON/R
      EE2=EE1/R
      EE3=EE2/R
      E1=EE1*EI
      E2=EE2*EI
      E3=EE3*EI
      XX=X*X
      XY=X*Y
      XZ=X*Z
      YY=Y*Y
      YZ=Y*Z
      ZZ=Z*Z
      GO TO (11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,
     +30,31,32,33,34,35,36,37,38,39,41,42) IC(ITYPE+I)
C
C    1S
C
   11 Q1= -EXPEE/R
      BF=  EXPON
      GX=  Q1*X
      GY=  Q1*Y
      GZ=  Q1*Z
      Q1=EI*E2+E3
      GXX=XX*Q1-E1
      GXY=XY*Q1
      GXZ=XZ*Q1
      GYY=YY*Q1-E1
      GYZ=YZ*Q1
      GZZ=ZZ*Q1-E1
      GO TO 40
C
C    2S
C
   12 Q1=  EXPEE*(1./ER-1.)
      BF=  EXPON*R
      GX=  Q1*X
      GY=  Q1*Y
      GZ=  Q1*Z
      Q1=EI*E1-EE3-E2
      Q2=EE1-EXPEE
      GXX=XX*Q1+Q2
      GXY=XY*Q1
      GXZ=XZ*Q1
      GZZ=ZZ*Q1+Q2
      GYY=YY*Q1+Q2
      GYZ=YZ*Q1
      GO TO 40
C
C    2P X
C
   13 Q1= -EXPEE*X/R
      BF=  EXPON*X
      GX=  Q1*X + EXPON
      GY=  Q1*Y
      GZ=  Q1*Z
      Q1=X*(E3+EI*E2)
      Q2=X*E1
      GXX=XX*Q1-3.*Q2
      GXY=XY*Q1-Y*E1
      GXZ=XZ*Q1-Z*E1
      GYY=YY*Q1-Q2
      GYZ=YZ*Q1
      GZZ=ZZ*Q1-Q2
      GO TO 40
C
C    2P Y
C
   14 Q1= -EXPEE*Y/R
      BF=  EXPON*Y
      GX=  Q1*X
      GY=  Q1*Y + EXPON
      GZ=  Q1*Z
      Q1=Y*(E3+EI*E2)
      Q2=Y*E1
      GXX=XX*Q1-Q2
      GXY=XY*Q1-X*E1
      GXZ=XZ*Q1
      GYY=YY*Q1-3.*Q2
      GYZ=YZ*Q1-Z*E1
      GZZ=ZZ*Q1-Q2
      GO TO 40
C
C    2P Z
C
   15 Q1= -EXPEE*Z/R
      BF=  EXPON*Z
      GX=  Q1*X
      GY=  Q1*Y
      GZ=  Q1*Z + EXPON
      Q1=Z*(E3+EI*E2)
      Q2=Z*E1
      GXX=XX*Q1-Q2
      GXY=XY*Q1
      GXZ=XZ*Q1-X*E1
      GYY=YY*Q1-Q2
      GYZ=YZ*Q1-Y*E1
      GZZ=ZZ*Q1-3.*Q2
      GO TO 40
C
C    3S
C
   16 Q1=  EXPON*2. - EXPEE*R
      BF=  EXPON*R*R
      GX=  Q1*X
      GY=  Q1*Y
      GZ=  Q1*Z
      Q1=EI*EXPEE-3.*E1
      Q2=-R*EXPEE+2.*EXPON
      GXX=XX*Q1+Q2
      GXY=XY*Q1
      GXZ=XZ*Q1
      GYY=YY*Q1+Q2
      GYZ=YZ*Q1
      GZZ=ZZ*Q1+Q2
      GO TO 40
C
C    3P X
C
   17 Q1=  EXPON*X
      Q2=Q1*(1.0/R-EI)
      BF=  Q1*R
      GX=  Q2*X + EXPON*R
      GY=  Q2*Y
      GZ=  Q2*Z
      Q1=X*(EI*E1-E2-EE3)
      Q2=EE1-EXPEE
      GXX=XX*Q1+3.*X*Q2
      GXY=XY*Q1+Y*Q2
      GXZ=XZ*Q1+Z*Q2
      GYY=YY*Q1+X*Q2
      GYZ=YZ*Q1
      GZZ=ZZ*Q1+X*Q2
      GO TO 40
C
C    3P Y
C
   18 Q1=  EXPON*Y
      Q2=Q1*(1.0/R-EI)
      BF=  Q1*R
      GX=  Q2*X
      GY=  Q2*Y + EXPON*R
      GZ=  Q2*Z
      Q1=Y*(EI*E1-E2-EE3)
      Q2=EE1-EXPEE
      GXX=XX*Q1+Y*Q2
      GXY=XY*Q1+X*Q2
      GXZ=XZ*Q1
      GYY=YY*Q1+3.*Y*Q2
      GYZ=YZ*Q1+Z*Q2
      GZZ=ZZ*Q1+Y*Q2
      GO TO 40
C
C    3P Z
C
   19 Q1=  EXPON*Z
      Q2=Q1*(1.0/R-EI)
      BF=  Q1*R
      GX=  Q2*X
      GY=  Q2*Y
      GZ=  Q2*Z + EXPON*R
      Q1=Z*(EI*E1-E2-EE3)
      Q2=EE1-EXPEE
      GXX=XX*Q1+Z*Q2
      GXY=XY*Q1
      GXZ=XZ*Q1+X*Q2
      GYY=YY*Q1+Z*Q2
      GYZ=YZ*Q1+Y*Q2
      GZZ=ZZ*Q1+3.*Z*Q2
      GO TO 40
C
C    3D Z2
C
   20 Q1=  3.*ZZ-R*R
      Q2= -EXPEE*Q1/R
      Q3=  2.*EXPON
      Q4=  Q2-Q3
      BF=  Q1*EXPON
      GX=  X*Q4
      GY=  Y*Q4
      GZ=  Z*(Q2+2.*Q3)
      Q1=3.*E1+3.*ZZ*(E3+EI*E2)-EI*EXPEE
      Q2=R*EXPEE+4.*EXPON
      Q3=Q2-3.*(2.*EXPON+ZZ*E1)
      GXX=XX*Q1+Q3
      GXY=XY*Q1
      GXZ=XZ*(Q1-6.*E1)
      GYY=YY*Q1+Q3
      GYZ=YZ*(Q1-6.*E1)
      GZZ=ZZ*(Q1-15.*E1)+Q2
      GO TO 40
C
C    3D X2-Y2
C
   21 Q1=  XX-YY
      Q2= -EXPEE*Q1/R
      Q3=  EXPON*2.
      BF=  Q1*EXPON
      GX=  X*(Q2+Q3)
      GY=  Y*(Q2-Q3)
      GZ=  Z*Q2
      Q1=Q1*(E3+EI*E2)
      Q2=XX*E1
      Q4=YY*E1
      GXX=XX*(Q1-5.*E1)+Q4+Q3
      GXY=XY*Q1
      GXZ=XZ*(Q1-2.*E1)
      GYY=YY*(Q1+5.*E1)-Q2-Q3
      GYZ=YZ*(Q1+2.*E1)
      GZZ=ZZ*Q1-Q2+Q4
      GO TO 40
C
C    3D XY
C
   22 Q1=  XY
      Q2= -EXPEE*Q1/R
      BF=  Q1*EXPON
      GX=  Q2*X + EXPON*Y
      GY=  Q2*Y + EXPON*X
      GZ=  Q2*Z
      Q2=Q1*E1
      Q1=Q1*(E3+EI*E2)
      GXX=XX*Q1-3.*Q2
      GXY=XY*Q1-(XX+YY)*E1+EXPON
      GXZ=XZ*Q1-YZ*E1
      GYY=YY*Q1-3.*Q2
      GYZ=YZ*Q1-XZ*E1
      GZZ=ZZ*Q1-Q2
      GO TO 40
C
C    3D XZ
C
   23 Q1=  XZ
      Q2= -EXPEE*Q1/R
      BF=  Q1*EXPON
      GX=  Q2*X + EXPON*Z
      GY=  Q2*Y
      GZ=  Q2*Z + EXPON*X
      Q2=Q1*E1
      Q1=Q1*(E3+EI*E2)
      GXX=XX*Q1-3.*Q2
      GXY=XY*Q1-YZ*E1
      GXZ=XZ*Q1-(XX+ZZ)*E1+EXPON
      GYY=YY*Q1-Q2
      GYZ=YZ*Q1-XY*E1
      GZZ=ZZ*Q1-3.*Q2
      GO TO 40
C
C    3D YZ
C
   24 Q1=  YZ
      Q2= -EXPEE*Q1/R
      BF=  Q1*EXPON
      GX=  Q2*X
      GY=  Q2*Y + EXPON*Z
      GZ=  Q2*Z + EXPON*Y
      Q2=Q1*E1
      Q1=Q1*(E3+EI*E2)
      GXX=XX*Q1-Q2
      GXY=XY*Q1-XZ*E1
      GXZ=XZ*Q1-XY*E1
      GYY=YY*Q1-3.*Q2
      GYZ=YZ*Q1-(YY+ZZ)*E1+EXPON
      GZZ=ZZ*Q1-3.*Q2
      GO TO 40
C
C    4P X
C
   25 Q1=  EXPON*R*R
      Q2=  EXPON*X*(2.-ER)
      BF=  Q1*X
      GX=  Q2*X + Q1
      GY=  Q2*Y
      GZ=  Q2*Z
      Q1=EI*EXPEE-3.*X*E1
      Q3=EXPON*(2.-ER)
      GXX=XX*Q1+3.*Q2
      GXY=XY*Q1+Q3*Y
      GXZ=XZ*Q1+Q3*Z
      GYY=YY*Q1+Q2
      GYZ=YZ*Q1
      GZZ=ZZ*Q1+Q2
      GO TO 40
C
C    4P Y
C
   26 Q1=  EXPON*R*R
      Q2=  EXPON*Y*(2.-ER)
      BF=  Q1*Y
      GX=  Q2*X
      GY=  Q2*Y + Q1
      GZ=  Q2*Z
      Q1=EI*EXPEE-3.*Y*E1
      Q3=EXPON*(2.-ER)
      GXX=XX*Q1+Q2
      GXY=XY*Q1+Q3*X
      GXZ=XZ*Q1
      GYY=YY*Q1+3.*Q2
      GYZ=YZ*Q1+Q3*Z
      GZZ=ZZ*Q1+Q2
      GO TO 40
C
C    4P Z
C
   27 Q1=  EXPON*R*R
      Q2=  EXPON*Z*(2.-ER)
      BF=  Q1*Z
      GX=  Q2*X
      GY=  Q2*Y
      GZ=  Q2*Z + Q1
      Q1=EI*EXPEE-3.*Z*E1
      Q3=EXPON*(2.-ER)
      GXX=XX*Q1+Q2
      GXY=XY*Q1
      GXZ=XZ*Q1+Q3*X
      GYY=YY*Q1+Q2
      GYZ=YZ*Q1+Q3*Y
      GZZ=ZZ*Q1+3.*Q2
      GO TO 40
C
C    4D Z2
C
   28 BF=  EXPON*R*(3.*ZZ-R*R)
      Q1=BF*(1.0/R-EI)/R
      GX=X*(Q1-2.0*R*EXPON)
      GY=Y*(Q1-2.0*R*EXPON)
      GZ=Z*(Q1+4.0*R*EXPON)
      Q1=3.*ZZ*(EI*E1-EE3-E2)-3.*EE1+(5.-ER)*EXPEE
      Q2=3.*(EE1-EXPEE)
      Q3=Q2*ZZ
      Q4=3.*R*EXPON
      Q5=R*R*EXPEE
      GXX=XX*Q1+Q3-Q4+Q5
      GXY=XY*Q1
      GXZ=XZ*(Q1+2.*Q2)
      GYY=YY*Q1+Q3-Q4+Q5
      GYZ=YZ*(Q1+2.*Q2)
      GZZ=ZZ*Q1+5.*Q3+Q4+Q5
      GO TO 40
C
C    4D XY
C
   29 CONTINUE
      Q2=EXPON*R
      BF=Q2*XY
      Q1=BF*(1.0/R-EI)/R
      GX=Q1*X+Q2*Y
      GY=Q1*Y+Q2*X
      GZ=Q1*Z
      Q1=XY*(EI*E1-E2-EE3)
      Q3=EE1-EXPEE
      Q4=XY*Q3
      GXX=XX*Q1+3.*Q4
      GXY=XY*Q1+(XX+YY)*Q3+Q2
      GXZ=XZ*Q1+YZ*Q3
      GYY=YY*Q1+3.*Q4
      GYZ=YZ*Q1+XZ*Q3
      GZZ=ZZ*Q1+Q4
      GO TO 40
C
C    4D XZ
C
   30 CONTINUE
      Q2=EXPON*R
      BF=Q2*XZ
      Q1=BF*(1.0/R-EI)/R
      GX=Q1*X+Q2*Z
      GY=Q1*Y
      GZ=Q1*Z+Q2*X
      Q1=XZ*(EI*E1-E2-EE3)
      Q3=EE1-EXPEE
      Q4=XZ*Q3
      GXX=XX*Q1+3.*Q4
      GXY=XY*Q1+YZ*Q3
      GXZ=XZ*Q1+(XX+ZZ)*Q3+Q2
      GYY=YY*Q1+Q4
      GYZ=YZ*Q1+XY*Q3
      GZZ=ZZ*Q1+3.*Q4
      GO TO 40
C
C    4D YZ
C
   31 CONTINUE
      Q2=EXPON*R
      BF=Q2*YZ
      Q1=BF*(1.0/R-EI)/R
      GX=Q1*X
      GY=Q1*Y+Q2*Z
      GZ=Q1*Z+Q2*Y
      Q1=YZ*(EI*E1-E2-EE3)
      Q3=EE1-EXPEE
      Q4=YZ*Q3
      GXX=XX*Q1+Q4
      GXY=XY*Q1+XZ*Q3
      GXZ=XZ*Q1+XY*Q3
      GYY=YY*Q1+3.*Q4
      GYZ=YZ*Q1+(YY+ZZ)*Q3+Q2
      GZZ=ZZ*Q1+3.*Q4
      GO TO 40
C
C    4F Z3
C
   32 Q1=  3.*R*R
      Q2=  5.*ZZ - Q1
      Q3=  Q2/R
      Q4=6.0/EI
      Q5= -EXPEE*Z
      Q6=  Q5*(Q3+Q4)
      BF=  Q2*Z*EXPON
      GX=  Q6*X
      GY=  Q6*Y
      GZ=  Q5*Z*(Q3-1.5*Q4) - Q1*EXPON
      Q1=Z*(5.*ZZ*(E3+EI*E2)+9.*E1-3.*EI*EXPEE)
      Q3=ZZ*E1
      Q2=3.*R*EXPEE-6.*EXPON-5.*Q3
      GXX=XX*Q1+Z*Q2
      GXY=XY*Q1
      GXZ=XZ*Q1+X*(Q2-10.*Q3)
      GYY=YY*Q1+Z*Q2
      GYZ=YZ*Q1+Y*(Q2-10.*Q3)
      GZZ=ZZ*Q1+Z*(3.*Q2+30.*EXPON-20.*Q3)
      GO TO 40
C
C    4F Z2X
C
   33 Q1=  5.*ZZ-R*R
      Q2= -EXPEE*Q1*X/R
      Q3=  EXPON*2.*X
      Q4=  Q2-Q3
      Q5=  EXPON*Q1
      BF=  Q5*X
      GX=  Q4*X + Q5
      GY=  Q4*Y
      GZ=  (Q2+4.*Q3)*Z
      Q1=X*(5.*ZZ*(E3+EI*E2)+3.*E1-EI*EXPEE)
      Q3=R*EXPEE-5.*ZZ*E1
      Q2=X*(Q3-2.*EXPON)
      Q4=5.*X*E1
      GXX=XX*Q1+3.*Q2
      GXY=XY*Q1+Y*(Q3-2.*EXPON)
      GXZ=XZ*(Q1-2.*Q4)+Z*(Q3-12.*EXPON)
      GYY=YY*Q1+Q2
      GYZ=YZ*(Q1-2.*Q4)
      GZZ=ZZ*(Q1-5.*Q4)+X*EXPON*(ER+8.)
      GO TO 40
C
C    4F Z2Y
C
   34 Q1=  5.*ZZ-R*R
      Q2= -EXPEE*Q1*Y/R
      Q3=  EXPON*2.*Y
      Q4=  Q2-Q3
      Q5=  EXPON*Q1
      BF=  Q5*Y
      GX=  Q4*X
      GY=  Q4*Y + Q5
      GZ=  (Q2+4.*Q3)*Z
      Q1=Y*(5.*ZZ*(E3+EI*E2)+3.*E1-EI*EXPEE)
      Q3=R*EXPEE-5.*ZZ*E1
      Q2=Y*(Q3-2.*EXPON)
      Q4=5.*Y*E1
      GXX=XX*Q1+Q2
      GXY=XY*Q1+X*(Q3-2.*EXPON)
      GXZ=XZ*(Q1-2.*Q4)
      GYY=YY*Q1+3.*Q2
      GYZ=YZ*(Q1-2.*Q4)+Z*(Q3-12.*EXPON)
      GZZ=ZZ*(Q1-5.*Q4)+Y*EXPON*(ER+8.)
      GO TO 40
C
C    4F Z2Z
C
   35 BF=  EXPON*Z*(5.*ZZ-R*R)
      GX=-X*(EI*BF/R+2.0*Z*EXPON)
      GY=-Y*(EI*BF/R+2.0*Z*EXPON)
      GZ=BF*(1.0/Z-EI*Z*R)+8.0*ZZ*EXPON
      Q1=Z*(5.*ZZ*(E3+EI*E2)+3.*E1-EI*EXPEE)
      Q3=ZZ*E1
      Q2=R*EXPEE-2.*EXPON-5.*Q3
      GXX=XX*Q1+Z*Q2
      GXY=XY*Q1
      GXZ=XZ*Q1+X*(Q2-10.*Q3)
      GYY=YY*Q1+Z*Q2
      GYZ=YZ*Q1+Y*(Q2-10.*Q3)
      GZZ=ZZ*Q1+Z*(3.*Q2+30.*EXPON-20.*Q3)
      GO TO 40
C
C    4S
C
   36 CONTINUE
      BF=R*R*R*EXPON
      Q1=BF*(3.0/R-EI)/R
      GX=Q1*X
      GY=Q1*Y
      GZ=Q1*Z
      Q1=3.*EE1+EXPEE*(ER-5.)
      Q2=R*EXPON*(3.-ER)
      GXX=XX*Q1+Q2
      GXY=XY*Q1
      GXZ=XZ*Q1
      GYY=YY*Q1+Q2
      GYZ=YZ*Q1
      GZZ=ZZ*Q1+Q2
      GO TO 40
C
C    4D X2-Y2
C
   37 CONTINUE
      BF=R*EXPON*(XX-YY)
      Q1=BF*(1.0/R-EI)/R
      GX=X*(Q1+2.0*R*EXPON)
      GY=Y*(Q1-2.0*R*EXPON)
      GZ=Q1*Z
      Q3=XX
      Q4=YY
      Q1=(Q3-Q4)*(EI*E1-E2-EE3)
      Q2=EE1-EXPEE
      GXX=Q3*(Q1+2.*Q2)+(3.*Q3-Q4)*Q2+2.*R*EXPON
      GXY=XY*(Q1+4.*Q2)
      GXZ=XZ*(Q1+2.*Q2)
      GYY=Q4*(Q1-2.*Q2)+(Q3-3.*Q4)*Q2-2.*R*EXPON
      GYZ=YZ*(Q1-2.*Q2)
      GZZ=ZZ*Q1+(Q3-Q4)*Q2
      GO TO 40
C
C    5S
C
   38 CONTINUE
      BF=(R*R)*(R*R)*EXPON
      Q1=BF*(4.0/R-EI)/R
      GX=Q1*X
      GY=Q1*Y
      GZ=Q1*Z
      Q1=EXPON*(8.+ER*(2.*ER-11.))
      Q2=R*R*(4.-ER)*EXPON
      GXX=XX*Q1+Q2
      GXY=XY*Q1
      GXZ=XZ*Q1
      GYY=YY*Q1+Q2
      GYZ=YZ*Q1
      GZZ=ZZ*Q1+Q2
      GO TO 40
C
C    5P X
C
   39 CONTINUE
      Q2=R*R*R*EXPON
      BF=Q2*X
      Q1=BF*(3.0/R-EI)/R
      GX=Q2+Q1*X
      GY=Q1*Y
      GZ=Q1*Z
      Q1=X*(3.*EE1+EXPEE*(ER-5.))
      Q3=R*(3.-ER)
      Q2=X*Q3
      GXX=XX*Q1+3.*Q2
      GXY=XY*Q1+Y*Q3
      GXZ=XZ*Q1+Z*Q3
      GYY=YY*Q1+Q2
      GYZ=YZ*Q1
      GZZ=ZZ*Q1+Q2
      GO TO 40
C
C    5P Y
C
   41 CONTINUE
      Q2=R*R*R*EXPON
      BF=Q2*Y
      Q1=BF*(3.0/R-EI)/R
      GX=Q1*X
      GY=Q2+Q1*Y
      GZ=Q1*Z
      Q1=Y*(3.*EE1+EXPEE*(ER-5.))
      Q3=R*(3.-ER)
      Q2=Y*Q3
      GXX=XX*Q1+Q2
      GXY=XY*Q1+X*Q3
      GXZ=XZ*Q1
      GYY=YY*Q1+3.*Q2
      GYZ=YZ*Q1+Z*Q3
      GZZ=ZZ*Q1+Q2
      GO TO 40
C
C    5P Z
C
   42 CONTINUE
      Q2=R*R*R*EXPON
      BF=Q2*Z
      Q1=BF*(3.0/R-EI)/R
      GX=Q1*X
      GY=Q1*Y
      GZ=Q1*Z+Q2
      Q1=Z*(3.*EE1+EXPEE*(ER-5.))
      Q3=R*(3.-ER)
      Q2=Z*Q3
      GXX=XX*Q1+Q2
      GXY=XY*Q1
      GXZ=XZ*Q1+X*Q3
      GYY=YY*Q1+Q2
      GYZ=YZ*Q1+Y*Q3
      GZZ=ZZ*Q1+Q2
   40 CONTINUE
C
      DO 59 J=1,NMO
      CIJ=CO(IMO+NPRIMS*(J-1)+I)
      CO(IPSI+J)=CO(IPSI+J)+CIJ*BF
      CO(IGX+J)=CO(IGX+J)+CIJ*GX
      CO(IGY+J)=CO(IGY+J)+CIJ*GY
      CO(IGZ+J)=CO(IGZ+J)+CIJ*GZ
      CO(IGXX+J)=CO(IGXX+J)+CIJ*GXX
      CO(IGXY+J)=CO(IGXY+J)+CIJ*GXY
      CO(IGXZ+J)=CO(IGXZ+J)+CIJ*GXZ
      CO(IGYY+J)=CO(IGYY+J)+CIJ*GYY
      CO(IGYZ+J)=CO(IGYZ+J)+CIJ*GYZ
      CO(IGZZ+J)=CO(IGZZ+J)+CIJ*GZZ
   59 CONTINUE
   60 CONTINUE
      RETURN
      END
        SUBROUTINE      TQLGRM  (N, D, E, Z,  IERR)
        IMPLICIT        DOUBLE PRECISION (A-H, O-Z)
        DIMENSION       D(*), E(*), Z(N,N)
        PARAMETER (AMACH = 16.0E-13)
        PARAMETER (ZERO = 0.0D0, ONE = 1.0D0)
C
        IERR    = 0
        IF (N .EQ. 1) RETURN
C
        DO 30 I = 2,N
        E(I-1)  = E(I)
30      CONTINUE

        F       = ZERO
        B       = ZERO
        E(N)    = ZERO

        DO 31 L = 1,N
        J       = 0
        H       = AMACH*(DABS(D(L)) + DABS(E(L)))
        IF (B .LT. H) B = H

                DO 32 M = L,N
                IF (DABS(E(M)) .LE. B) GOTO 120
32              CONTINUE

120     IF (M .EQ. L) GOTO 220

130     IF (J .EQ. 30) THEN
                IERR    = L
                RETURN
        END IF

        J       = J + 1
        L1      = L + 1
        G       = D(L)
        P       = (D(L1) - G)/(2*E(L))
        IF (DABS(P*AMACH) .GT. ONE) THEN
                R       = P
        ELSE
                R       = DSQRT(P*P + 1)
        END IF
        D(L)    = E(L)/(P + DSIGN(R,P))
        H       = G - D(L)

                DO 33 I = L1,N
                D(I)    = D(I) - H
33              CONTINUE

        F       = F + H
        P       = D(M)
        C       = ONE
        S       = ZERO
        MML     = M - L

                DO 34 II = 1,MML
                I       = M - II
                G       = C*E(I)
                H       = C*P
                IF (DABS(P) .GE. DABS(E(I))) THEN
                        C       = E(I)/P
                        R       = DSQRT(C*C + 1)
                        E(I+1)  = S*P*R
                        S       = C/R
                        C       = ONE/R
                ELSE
                        C       = P/E(I)
                        R       = DSQRT(C*C + 1)
                        E(I+1)  = S*E(I)*R
                        S       = 1.D0/R
                        C       = C*S
                END IF
                P       = C*D(I) - S*G
                D(I+1)  = H + S*(C*G + S*D(I))

                        DO 35 K = 1,N
                        H       = Z(K,I+1)
                        Z(K,I+1)= S*Z(K,I) + C*H
                        Z(K,I)  = C*Z(K,I) - S*H
35                      CONTINUE

34              CONTINUE

        E(L)    = S*P
        D(L)    = C*P
        IF (DABS(E(L)) .GT. B) GOTO 130

220     D(L)    = D(L) + F
31      CONTINUE

      IF (IOR .EQ. 0) THEN
        DO 300 II = 2,N
        I       = II - 1
        K       = I
        P       = D(I)

                DO 260 J = II,N
                IF (D(J) .GE. P) GOTO 260
                K       = J
                P       = D(J)
260             CONTINUE

        IF (K .EQ. I) GOTO 300
        D(K)    = D(I)
        D(I)    = P

                DO 37 J = 1,N
                P       = Z(J,I)
                Z(J,I)  = Z(J,K)
                Z(J,K)  = P
37              CONTINUE

300     CONTINUE
      END IF
      RETURN
        END
        SUBROUTINE      TRACE   (H, E, W, N,  IERR)
C
C TRACE CALLS TREDIG AND TLQGRM TO DIAGONALIZE A SYMMETRIC REAL MATRIX.
C THE MATRIX IS PASSED DOWN IN H AND IS REPLACED BY THE EIGENVECTORS.
C THE WORK STORE W SHOULD BE AT LEAST OF DIMENSION N.
C   IOR:
C       =0 THE EIGENVALUES IN E ARE STORED SMALLEST FIRST.
C       =1 THE EIGENVALUES IN E STORED WITHOUT CHANGING ORDER.
C SKK ==================================================================
C
        IMPLICIT        DOUBLE PRECISION (A-H, O-Z)
        DIMENSION       H(N,N), E(N), W(N)
C
        CALL TREDIG     (N, E, W, H)
        CALL TQLGRM     (N, E, W, H,   IERR)
C
        RETURN
        END
        SUBROUTINE      TREDIG  (N, D, E, Z)
        IMPLICIT        DOUBLE PRECISION (A-H, O-Z)
        DIMENSION       D(N), E(N), Z(N,N)
        PARAMETER       (ZERO = 0.0D0, ONE = 1.0D0)

        IF (N .EQ. 1) GOTO 320

        DO 30 II = 2,N
        I       = N + 2 - II
        L       = I - 1
        H       = ZERO
        SCALE   = ZERO

        IF (L .LT. 2) GOTO 130

                DO 31 K = 1,L
                SCALE   = SCALE + DABS(Z(I,K))
31              CONTINUE

        IF (SCALE .NE. ZERO) GOTO 140
130     E(I)    = Z(I,L)
        GOTO 290

140     RSCALE  = ONE/SCALE
                DO 32 K = 1,L
                Z(I,K)  = Z(I,K)*RSCALE
                H       = H + Z(I,K)*Z(I,K)
32              CONTINUE
        F       = Z(I,L)
        G       = -DSIGN(DSQRT(H),F)
        E(I)    = SCALE*G
        H       = H - F*G
        Z(I,L)  = F - G
        F       = ZERO
        RH      = ONE/H
        RHSCALE = RH*RSCALE

                DO 33 J = 1,L
                Z(J,I)  = Z(I,J)*RHSCALE
                G       = ZERO

                        DO 34 K = 1,J
                        G       = G + Z(J,K)*Z(I,K)
34                      CONTINUE

                JP1     = J + 1
                IF (L .LT. JP1) GOTO 220

                        DO 35 K = JP1,L
                        G       = G + Z(K,J)*Z(I,K)
35                      CONTINUE

220             E(J)    = G*RH
                F       = F + E(J)*Z(I,J)
33              CONTINUE

        HH      = F/(H + H)

                DO 36 J = 1,L
                F       = Z(I,J)
                G       = E(J) - HH*F
                E(J)    = G
                        DO 37 K = 1,J
                        Z(J,K)  = Z(J,K) - F*E(K) - G*Z(I,K)
37                      CONTINUE
36              CONTINUE

                DO 38 K = 1,L
                Z(I,K)  =  SCALE*Z(I,K)
38              CONTINUE

290     D(I)    = H
30      CONTINUE

320     D(1)    = ZERO
        E(1)    = ZERO

        DO 500 I = 1,N
        L       = I - 1
        IF (D(I) .EQ. ZERO) GOTO 380

                DO 40 J = 1,L
                G       = ZERO

                        DO 41 K = 1,L
                        G       = G + Z(I,K)*Z(K,J)
41                      CONTINUE

                        DO 42 K = 1,L
                        Z(K,J)  = Z(K,J) - G*Z(K,I)
42                      CONTINUE

40              CONTINUE

380     D(I)    = Z(I,I)
        Z(I,I)  = ONE
        IF(L .LT. 1) GOTO 500

                DO 43 J = 1,L
                Z(J,I)  = ZERO
                Z(I,J)  = ZERO
43              CONTINUE

500     CONTINUE
        RETURN
        END
